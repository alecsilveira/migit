\input texinfo
@documentencoding UTF-8

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Pandoc User's Guide
@author John MacFarlane
January 12, 2016
@end titlepage

@node Top
@top Pandoc User's Guide

@menu
* Synopsis::
* Description::
* Options::
* Templates::
* Pandoc's Markdown::
* Producing slide shows with pandoc::
* Creating EPUBs with pandoc::
* Literate Haskell support::
* Syntax highlighting::
* Custom writers::
* Authors::
@end menu

@node Synopsis
@chapter Synopsis
@anchor{#synopsis}
@code{pandoc} [@emph{options}] [@emph{input-file}]...

@node Description
@chapter Description
@anchor{#description}
Pandoc is a @uref{https://www.haskell.org,Haskell} library for
converting from one markup format to another, and a command-line tool
that uses this library. It can read
@uref{http://daringfireball.net/projects/markdown/,Markdown},
@uref{http://commonmark.org,CommonMark},
@uref{https://michelf.ca/projects/php-markdown/extra/,PHP Markdown
Extra},
@uref{https://help.github.com/articles/github-flavored-markdown/,GitHub-Flavored
Markdown}, and (subsets of) @uref{http://redcloth.org/textile,Textile},
@uref{http://docutils.sourceforge.net/docs/ref/rst/introduction.html,reStructuredText},
@uref{http://www.w3.org/html/,HTML},
@uref{http://latex-project.org,LaTeX},
@uref{https://www.mediawiki.org/wiki/Help:Formatting,MediaWiki markup},
@uref{http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules,TWiki
markup},
@uref{https://www.haskell.org/haddock/doc/html/ch03s08.html,Haddock
markup}, @uref{http://dev.opml.org/spec2.html,OPML},
@uref{http://orgmode.org,Emacs Org mode},
@uref{http://docbook.org,DocBook}, @uref{http://txt2tags.org,txt2tags},
@uref{http://idpf.org/epub,EPUB},
@uref{http://en.wikipedia.org/wiki/OpenDocument,ODT} and
@uref{http://www.microsoft.com/interop/openup/openxml/default.aspx,Word
docx}; and it can write plain text,
@uref{http://daringfireball.net/projects/markdown/,Markdown},
@uref{http://commonmark.org,CommonMark},
@uref{https://michelf.ca/projects/php-markdown/extra/,PHP Markdown
Extra},
@uref{https://help.github.com/articles/github-flavored-markdown/,GitHub-Flavored
Markdown},
@uref{http://docutils.sourceforge.net/docs/ref/rst/introduction.html,reStructuredText},
@uref{http://www.w3.org/TR/xhtml1/,XHTML},
@uref{http://www.w3.org/TR/html5/,HTML5},
@uref{http://latex-project.org,LaTeX} (including
@uref{https://ctan.org/pkg/beamer,@code{beamer}} slide shows),
@uref{http://contextgarden.net/,ConTeXt},
@uref{http://en.wikipedia.org/wiki/Rich_Text_Format,RTF},
@uref{http://dev.opml.org/spec2.html,OPML},
@uref{http://docbook.org,DocBook},
@uref{http://opendocument.xml.org,OpenDocument},
@uref{http://en.wikipedia.org/wiki/OpenDocument,ODT},
@uref{http://www.microsoft.com/interop/openup/openxml/default.aspx,Word
docx}, @uref{http://www.gnu.org/software/texinfo/,GNU Texinfo},
@uref{https://www.mediawiki.org/wiki/Help:Formatting,MediaWiki markup},
@uref{https://www.dokuwiki.org/dokuwiki,DokuWiki markup},
@uref{https://www.haskell.org/haddock/doc/html/ch03s08.html,Haddock
markup}, @uref{http://idpf.org/epub,EPUB} (v2 or v3),
@uref{http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1,FictionBook2},
@uref{http://redcloth.org/textile,Textile},
@uref{http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man7/groff_man.7.html,groff
man} pages, @uref{http://orgmode.org,Emacs Org mode},
@uref{http://www.methods.co.nz/asciidoc/,AsciiDoc},
@uref{https://www.adobe.com/content/dam/Adobe/en/devnet/indesign/cs55-docs/IDML/idml-specification.pdf,InDesign
ICML}, @uref{https://github.com/TEIC/TEI-Simple,TEI Simple}, and
@uref{http://www.w3.org/Talks/Tools/Slidy/,Slidy},
@uref{http://goessner.net/articles/slideous/,Slideous},
@uref{http://paulrouget.com/dzslides/,DZSlides},
@uref{http://lab.hakim.se/reveal-js/,reveal.js} or
@uref{http://meyerweb.com/eric/tools/s5/,S5} HTML slide shows. It can
also produce @uref{https://www.adobe.com/pdf/,PDF} output on systems
where LaTeX, ConTeXt, or @code{wkhtmltopdf} is installed.

Pandoc's enhanced version of Markdown includes syntax for
@ref{#footnotes,footnotes}, @ref{#tables,tables}, flexible
@ref{#ordered-lists,ordered lists}, @ref{#definition-lists,definition
lists}, @ref{#fenced-code-blocks,fenced code blocks},
@ref{#superscripts-and-subscripts,superscripts and subscripts},
@ref{#strikeout,strikeout}, @ref{#metadata-blocks,metadata blocks},
automatic tables of contents, embedded LaTeX @ref{#math,math},
@ref{#citations,citations}, and
@ref{#extension-markdown_in_html_blocks,Markdown inside HTML block
elements}. (These enhancements, described below under
@ref{#pandocs-markdown,Pandoc's Markdown}, can be disabled using the
@code{markdown_strict} input or output format.)

In contrast to most existing tools for converting Markdown to HTML,
which use regex substitutions, pandoc has a modular design: it consists
of a set of readers, which parse text in a given format and produce a
native representation of the document, and a set of writers, which
convert this native representation into a target format. Thus, adding an
input or output format requires only adding a reader or writer.

Because pandoc's intermediate representation of a document is less
expressive than many of the formats it converts between, one should not
expect perfect conversions between every format and every other. Pandoc
attempts to preserve the structural elements of a document, but not
formatting details such as margin size. And some document elements, such
as complex tables, may not fit into pandoc's simple document model.
While conversions from pandoc's Markdown to all formats aspire to be
perfect, conversions from formats more expressive than pandoc's Markdown
can be expected to be lossy.
@menu
* Using pandoc::
* Creating a PDF::
@end menu

@node Using pandoc
@section Using @code{pandoc}
@anchor{#using-pandoc}
If no @emph{input-file} is specified, input is read from @emph{stdin}.
Otherwise, the @emph{input-files} are concatenated (with a blank line
between each) and used as input. Output goes to @emph{stdout} by default
(though output to @emph{stdout} is disabled for the @code{odt},
@code{docx}, @code{epub}, and @code{epub3} output formats). For output
to a file, use the @code{-o} option:

@verbatim
pandoc -o output.html input.txt
@end verbatim

By default, pandoc produces a document fragment, not a standalone
document with a proper header and footer. To produce a standalone
document, use the @code{-s} or @code{--standalone} flag:

@verbatim
pandoc -s -o output.html input.txt
@end verbatim

For more information on how standalone documents are produced, see
@ref{#templates,Templates}, below.

Instead of a file, an absolute URI may be given. In this case pandoc
will fetch the content using HTTP:

@verbatim
pandoc -f html -t markdown http://www.fsf.org
@end verbatim

If multiple input files are given, @code{pandoc} will concatenate them
all (with blank lines between them) before parsing. This feature is
disabled for binary input formats such as @code{EPUB}, @code{odt}, and
@code{docx}.

The format of the input and output can be specified explicitly using
command-line options. The input format can be specified using the
@code{-r/--read} or @code{-f/--from} options, the output format using
the @code{-w/--write} or @code{-t/--to} options. Thus, to convert
@code{hello.txt} from Markdown to LaTeX, you could type:

@verbatim
pandoc -f markdown -t latex hello.txt
@end verbatim

To convert @code{hello.html} from HTML to Markdown:

@verbatim
pandoc -f html -t markdown hello.html
@end verbatim

Supported output formats are listed below under the @code{-t/--to}
option. Supported input formats are listed below under the
@code{-f/--from} option. Note that the @code{rst}, @code{textile},
@code{latex}, and @code{html} readers are not complete; there are some
constructs that they do not parse.

If the input or output format is not specified explicitly, @code{pandoc}
will attempt to guess it from the extensions of the input and output
filenames. Thus, for example,

@verbatim
pandoc -o hello.tex hello.txt
@end verbatim

will convert @code{hello.txt} from Markdown to LaTeX. If no output file
is specified (so that output goes to @emph{stdout}), or if the output
file's extension is unknown, the output format will default to HTML. If
no input file is specified (so that input comes from @emph{stdin}), or
if the input files' extensions are unknown, the input format will be
assumed to be Markdown unless explicitly specified.

Pandoc uses the UTF-8 character encoding for both input and output. If
your local character encoding is not UTF-8, you should pipe input and
output through
@uref{http://www.gnu.org/software/libiconv/,@code{iconv}}:

@verbatim
iconv -t utf-8 input.txt | pandoc | iconv -f utf-8
@end verbatim

Note that in some output formats (such as HTML, LaTeX, ConTeXt, RTF,
OPML, DocBook, and Texinfo), information about the character encoding is
included in the document header, which will only be included if you use
the @code{-s/--standalone} option.

@node Creating a PDF
@section Creating a PDF
@anchor{#creating-a-pdf}
To produce a PDF, specify an output file with a @code{.pdf} extension.
By default, pandoc will use LaTeX to convert it to PDF:

@verbatim
pandoc test.txt -o test.pdf
@end verbatim

Production of a PDF requires that a LaTeX engine be installed (see
@code{--latex-engine}, below), and assumes that the following LaTeX
packages are available:
@uref{https://ctan.org/pkg/amsfonts,@code{amsfonts}},
@uref{https://ctan.org/pkg/amsmath,@code{amsmath}},
@uref{https://ctan.org/pkg/lm,@code{lm}},
@uref{https://ctan.org/pkg/ifxetex,@code{ifxetex}},
@uref{https://ctan.org/pkg/ifluatex,@code{ifluatex}},
@uref{https://ctan.org/pkg/eurosym,@code{eurosym}},
@uref{https://ctan.org/pkg/listings,@code{listings}} (if the
@code{--listings} option is used),
@uref{https://ctan.org/pkg/fancyvrb,@code{fancyvrb}},
@uref{https://ctan.org/pkg/longtable,@code{longtable}},
@uref{https://ctan.org/pkg/booktabs,@code{booktabs}},
@uref{https://ctan.org/pkg/graphicx,@code{graphicx}} and
@uref{https://ctan.org/pkg/grffile,@code{grffile}} (if the document
contains images), @uref{https://ctan.org/pkg/hyperref,@code{hyperref}},
@uref{https://ctan.org/pkg/ulem,@code{ulem}},
@uref{https://ctan.org/pkg/geometry,@code{geometry}} (with the
@code{geometry} variable set),
@uref{https://ctan.org/pkg/setspace,@code{setspace}} (with
@code{linestretch}), and @uref{https://ctan.org/pkg/babel,@code{babel}}
(with @code{lang}). The use of @code{xelatex} or @code{lualatex} as the
LaTeX engine requires
@uref{https://ctan.org/pkg/fontspec,@code{fontspec}}; @code{xelatex}
uses @uref{https://ctan.org/pkg/mathspec,@code{mathspec}},
@uref{https://ctan.org/pkg/polyglossia,@code{polyglossia}} (with
@code{lang}), @uref{https://ctan.org/pkg/xecjk,@code{xecjk}}, and
@uref{https://ctan.org/pkg/bidi,@code{bidi}} (with the @code{dir}
variable set). The @uref{https://ctan.org/pkg/upquote,@code{upquote}}
and @uref{https://ctan.org/pkg/microtype,@code{microtype}} packages are
used if available, and
@uref{https://ctan.org/pkg/csquotes,@code{csquotes}} will be used for
@ref{#smart-punctuation,smart punctuation} if added to the template or
included in any header file. The
@uref{https://ctan.org/pkg/natbib,@code{natbib}},
@uref{https://ctan.org/pkg/biblatex,@code{biblatex}},
@uref{https://ctan.org/pkg/bibtex,@code{bibtex}}, and
@uref{https://ctan.org/pkg/biber,@code{biber}} packages can optionally
be used for @ref{#citation-rendering,citation rendering}. These are
included with all recent versions of
@uref{http://www.tug.org/texlive/,TeX Live}.

Alternatively, pandoc can use ConTeXt or @code{wkhtmltopdf} to create a
PDF. To do this, specify an output file with a @code{.pdf} extension, as
before, but add @code{-t context} or @code{-t html5} to the command
line.

PDF output can be controlled using @ref{#variables-for-latex,variables
for LaTeX} (if LaTeX is used) and @ref{#variables-for-context,variables
for ConTeXt} (if ConTeXt is used). If @code{wkhtmltopdf} is used, then
the variables @code{margin-left}, @code{margin-right},
@code{margin-top}, @code{margin-bottom}, and @code{papersize} will
affect the output, as will @code{--css}.

@node Options
@chapter Options
@anchor{#options}
@menu
* General options::
* Reader options::
* General writer options::
* Options affecting specific writers::
* Citation rendering::
* Math rendering in HTML::
* Options for wrapper scripts::
@end menu

@node General options
@section General options
@anchor{#general-options}
@table @asis
@item @code{-f} @emph{FORMAT}, @code{-r} @emph{FORMAT},
@code{--from=}@emph{FORMAT}, @code{--read=}@emph{FORMAT}

Specify input format. @emph{FORMAT} can be @code{native} (native
Haskell), @code{json} (JSON version of native AST), @code{markdown}
(pandoc's extended Markdown), @code{markdown_strict} (original
unextended Markdown), @code{markdown_phpextra} (PHP Markdown Extra),
@code{markdown_github} (GitHub-Flavored Markdown), @code{commonmark}
(CommonMark Markdown), @code{textile} (Textile), @code{rst}
(reStructuredText), @code{html} (HTML), @code{docbook} (DocBook),
@code{t2t} (txt2tags), @code{docx} (docx), @code{odt} (ODT), @code{epub}
(EPUB), @code{opml} (OPML), @code{org} (Emacs Org mode),
@code{mediawiki} (MediaWiki markup), @code{twiki} (TWiki markup),
@code{haddock} (Haddock markup), or @code{latex} (LaTeX). If @code{+lhs}
is appended to @code{markdown}, @code{rst}, @code{latex}, or
@code{html}, the input will be treated as literate Haskell source: see
@ref{#literate-haskell-support,Literate Haskell support}, below.
Markdown syntax extensions can be individually enabled or disabled by
appending @code{+EXTENSION} or @code{-EXTENSION} to the format name. So,
for example, @code{markdown_strict+footnotes+definition_lists} is strict
Markdown with footnotes and definition lists enabled, and
@code{markdown-pipe_tables+hard_line_breaks} is pandoc's Markdown
without pipe tables and with hard line breaks. See
@ref{#pandocs-markdown,Pandoc's Markdown}, below, for a list of
extensions and their names.

@item @code{-t} @emph{FORMAT}, @code{-w} @emph{FORMAT},
@code{--to=}@emph{FORMAT}, @code{--write=}@emph{FORMAT}

Specify output format. @emph{FORMAT} can be @code{native} (native
Haskell), @code{json} (JSON version of native AST), @code{plain} (plain
text), @code{markdown} (pandoc's extended Markdown),
@code{markdown_strict} (original unextended Markdown),
@code{markdown_phpextra} (PHP Markdown Extra), @code{markdown_github}
(GitHub-Flavored Markdown), @code{commonmark} (CommonMark Markdown),
@code{rst} (reStructuredText), @code{html} (XHTML), @code{html5}
(HTML5), @code{latex} (LaTeX), @code{beamer} (LaTeX beamer slide show),
@code{context} (ConTeXt), @code{man} (groff man), @code{mediawiki}
(MediaWiki markup), @code{dokuwiki} (DokuWiki markup), @code{textile}
(Textile), @code{org} (Emacs Org mode), @code{texinfo} (GNU Texinfo),
@code{opml} (OPML), @code{docbook} (DocBook), @code{opendocument}
(OpenDocument), @code{odt} (OpenOffice text document), @code{docx} (Word
docx), @code{haddock} (Haddock markup), @code{rtf} (rich text format),
@code{epub} (EPUB v2 book), @code{epub3} (EPUB v3), @code{fb2}
(FictionBook2 e-book), @code{asciidoc} (AsciiDoc), @code{icml} (InDesign
ICML), @code{tei} (TEI Simple), @code{slidy} (Slidy HTML and javascript
slide show), @code{slideous} (Slideous HTML and javascript slide show),
@code{dzslides} (DZSlides HTML5 + javascript slide show),
@code{revealjs} (reveal.js HTML5 + javascript slide show), @code{s5} (S5
HTML and javascript slide show), or the path of a custom lua writer (see
@ref{#custom-writers,Custom writers}, below). Note that @code{odt},
@code{epub}, and @code{epub3} output will not be directed to
@emph{stdout}; an output filename must be specified using the
@code{-o/--output} option. If @code{+lhs} is appended to
@code{markdown}, @code{rst}, @code{latex}, @code{beamer}, @code{html},
or @code{html5}, the output will be rendered as literate Haskell source:
see @ref{#literate-haskell-support,Literate Haskell support}, below.
Markdown syntax extensions can be individually enabled or disabled by
appending @code{+EXTENSION} or @code{-EXTENSION} to the format name, as
described above under @code{-f}.

@item @code{-o} @emph{FILE}, @code{--output=}@emph{FILE}

Write output to @emph{FILE} instead of @emph{stdout}. If @emph{FILE} is
@code{-}, output will go to @emph{stdout}. (Exception: if the output
format is @code{odt}, @code{docx}, @code{epub}, or @code{epub3}, output
to stdout is disabled.)

@item @code{--data-dir=}@emph{DIRECTORY}

Specify the user data directory to search for pandoc data files. If this
option is not specified, the default user data directory will be used.
This is, in Unix:

@verbatim
$HOME/.pandoc
@end verbatim

in Windows XP:

@verbatim
C:\Documents And Settings\USERNAME\Application Data\pandoc
@end verbatim

and in Windows Vista or later:

@verbatim
C:\Users\USERNAME\AppData\Roaming\pandoc
@end verbatim

You can find the default user data directory on your system by looking
at the output of @code{pandoc --version}. A @code{reference.odt},
@code{reference.docx}, @code{epub.css}, @code{templates}, @code{slidy},
@code{slideous}, or @code{s5} directory placed in this directory will
override pandoc's normal defaults.

@item @code{--bash-completion}

Generate a bash completion script. To enable bash completion with
pandoc, add this to your @code{.bashrc}:

@verbatim
 eval "$(pandoc --bash-completion)"
@end verbatim

@item @code{--verbose}

Give verbose debugging output. Currently this only has an effect with
PDF output.

@item @code{-v}, @code{--version}

Print version.

@item @code{-h}, @code{--help}

Show usage message.

@end table

@node Reader options
@section Reader options
@anchor{#reader-options}
@table @asis
@item @code{-R}, @code{--parse-raw}

Parse untranslatable HTML codes and LaTeX environments as raw HTML or
LaTeX, instead of ignoring them. Affects only HTML and LaTeX input. Raw
HTML can be printed in Markdown, reStructuredText, HTML, Slidy,
Slideous, DZSlides, reveal.js, and S5 output; raw LaTeX can be printed
in Markdown, reStructuredText, LaTeX, and ConTeXt output. The default is
for the readers to omit untranslatable HTML codes and LaTeX
environments. (The LaTeX reader does pass through untranslatable LaTeX
@emph{commands}, even if @code{-R} is not specified.)

@item @code{-S}, @code{--smart}

Produce typographically correct output, converting straight quotes to
curly quotes, @code{---} to em-dashes, @code{--} to en-dashes, and
@code{...} to ellipses. Nonbreaking spaces are inserted after certain
abbreviations, such as "Mr." (Note: This option is selected
automatically when the output format is @code{latex} or @code{context},
unless @code{--no-tex-ligatures} is used. It has no effect for
@code{latex} input.)

@item @code{--old-dashes}

Selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes:
@code{-} before a numeral is an en-dash, and @code{--} is an em-dash.
This option is selected automatically for @code{textile} input.

@item @code{--base-header-level=}@emph{NUMBER}

Specify the base level for headers (defaults to 1).

@item @code{--indented-code-classes=}@emph{CLASSES}

Specify classes to use for indented code blocks--for example,
@code{perl,numberLines} or @code{haskell}. Multiple classes may be
separated by spaces or commas.

@item @code{--default-image-extension=}@emph{EXTENSION}

Specify a default extension to use when image paths/URLs have no
extension. This allows you to use the same source for formats that
require different kinds of images. Currently this option only affects
the Markdown and LaTeX readers.

@item @code{--file-scope}

Parse each file individually before combining for multifile documents.
This will allow footnotes in different files with the same identifiers
to work as expected. If this option is set, footnotes and links will not
work across files. Reading binary files (docx, odt, epub) implies
@code{--file-scope}.

@item @code{--filter=}@emph{EXECUTABLE}

Specify an executable to be used as a filter transforming the pandoc AST
after the input is parsed and before the output is written. The
executable should read JSON from stdin and write JSON to stdout. The
JSON must be formatted like pandoc's own JSON input and output. The name
of the output format will be passed to the filter as the first argument.
Hence,

@verbatim
pandoc --filter ./caps.py -t latex
@end verbatim

is equivalent to

@verbatim
pandoc -t json | ./caps.py latex | pandoc -f json -t latex
@end verbatim

The latter form may be useful for debugging filters.

Filters may be written in any language. @code{Text.Pandoc.JSON} exports
@code{toJSONFilter} to facilitate writing filters in Haskell. Those who
would prefer to write filters in python can use the module
@uref{https://github.com/jgm/pandocfilters,@code{pandocfilters}},
installable from PyPI. There are also pandoc filter libraries in
@uref{https://github.com/vinai/pandocfilters-php,PHP},
@uref{https://metacpan.org/pod/Pandoc::Filter,perl}, and
@uref{https://github.com/mvhenderson/pandoc-filter-node,javascript/node.js}.

Note that the @emph{EXECUTABLE} will be sought in the user's
@code{PATH}, and not in the working directory, if no directory is
provided. If you want to run a script in the working directory, preface
the filename with @code{./}.

@item @code{-M} @emph{KEY}[@code{=}@emph{VAL}],
@code{--metadata=}@emph{KEY}[@code{:}@emph{VAL}]

Set the metadata field @emph{KEY} to the value @emph{VAL}. A value
specified on the command line overrides a value specified in the
document. Values will be parsed as YAML boolean or string values. If no
value is specified, the value will be treated as Boolean true. Like
@code{--variable}, @code{--metadata} causes template variables to be
set. But unlike @code{--variable}, @code{--metadata} affects the
metadata of the underlying document (which is accessible from filters
and may be printed in some output formats).

@item @code{--normalize}

Normalize the document after reading: merge adjacent @code{Str} or
@code{Emph} elements, for example, and remove repeated @code{Space}s.

@item @code{-p}, @code{--preserve-tabs}

Preserve tabs instead of converting them to spaces (the default). Note
that this will only affect tabs in literal code spans and code blocks;
tabs in regular text will be treated as spaces.

@item @code{--tab-stop=}@emph{NUMBER}

Specify the number of spaces per tab (default is 4).

@item @code{--track-changes=accept}|@code{reject}|@code{all}

Specifies what to do with insertions and deletions produced by the MS
Word "Track Changes" feature. @code{accept} (the default), inserts all
insertions, and ignores all deletions. @code{reject} inserts all
deletions and ignores insertions. @code{all} puts in both insertions and
deletions, wrapped in spans with @code{insertion} and @code{deletion}
classes, respectively. The author and time of change is included.
@code{all} is useful for scripting: only accepting changes from a
certain reviewer, say, or before a certain date. This option only
affects the docx reader.

@item @code{--extract-media=}@emph{DIR}

Extract images and other media contained in a docx or epub container to
the path @emph{DIR}, creating it if necessary, and adjust the images
references in the document so they point to the extracted files. This
option only affects the docx and epub readers.

@end table

@node General writer options
@section General writer options
@anchor{#general-writer-options}
@table @asis
@item @code{-s}, @code{--standalone}

Produce output with an appropriate header and footer (e.g. a standalone
HTML, LaTeX, TEI, or RTF file, not a fragment). This option is set
automatically for @code{pdf}, @code{epub}, @code{epub3}, @code{fb2},
@code{docx}, and @code{odt} output.

@item @code{--template=}@emph{FILE}

Use @emph{FILE} as a custom template for the generated document. Implies
@code{--standalone}. See @ref{#templates,Templates}, below, for a
description of template syntax. If no extension is specified, an
extension corresponding to the writer will be added, so that
@code{--template=special} looks for @code{special.html} for HTML output.
If the template is not found, pandoc will search for it in the
@code{templates} subdirectory of the user data directory (see
@code{--data-dir}). If this option is not used, a default template
appropriate for the output format will be used (see
@code{-D/--print-default-template}).

@item @code{-V} @emph{KEY}[@code{=}@emph{VAL}],
@code{--variable=}@emph{KEY}[@code{:}@emph{VAL}]

Set the template variable @emph{KEY} to the value @emph{VAL} when
rendering the document in standalone mode. This is generally only useful
when the @code{--template} option is used to specify a custom template,
since pandoc automatically sets the variables used in the default
templates. If no @emph{VAL} is specified, the key will be given the
value @code{true}.

@item @code{-D} @emph{FORMAT},
@code{--print-default-template=}@emph{FORMAT}

Print the system default template for an output @emph{FORMAT}. (See
@code{-t} for a list of possible @emph{FORMAT}s.) Templates in the user
data directory are ignored.

@item @code{--print-default-data-file=}@emph{FILE}

Print a system default data file. Files in the user data directory are
ignored.

@item @code{--dpi}=@emph{NUMBER}

Specify the dpi (dots per inch) value for conversion from pixels to
inch/centimeters and vice versa. The default is 96dpi. Technically, the
correct term would be ppi (pixels per inch).
@item @code{--wrap=[auto|none|preserve]}

Determine how text is wrapped in the output (the source code, not the
rendered version). With @code{auto} (the default), pandoc will attempt
to wrap lines to the column width specified by @code{--columns} (default
80). With @code{none}, pandoc will not wrap lines at all. With
@code{preserve}, pandoc will attempt to preserve the wrapping from the
source document (that is, where there are nonsemantic newlines in the
source, there will be nonsemantic newlines in the output as well).

@item @code{--no-wrap}

Deprecated synonym for @code{--wrap=none}.

@item @code{--columns=}@emph{NUMBER}

Specify length of lines in characters (for text wrapping). This affects
only the generated source code, not the layout on the rendered page.

@item @code{--toc}, @code{--table-of-contents}

Include an automatically generated table of contents (or, in the case of
@code{latex}, @code{context}, @code{docx}, and @code{rst}, an
instruction to create one) in the output document. This option has no
effect on @code{man}, @code{docbook}, @code{slidy}, @code{slideous},
@code{s5}, or @code{odt} output.

@item @code{--toc-depth=}@emph{NUMBER}

Specify the number of section levels to include in the table of
contents. The default is 3 (which means that level 1, 2, and 3 headers
will be listed in the contents).

@item @code{--no-highlight}

Disables syntax highlighting for code blocks and inlines, even when a
language attribute is given.

@item @code{--highlight-style=}@emph{STYLE}

Specifies the coloring style to be used in highlighted source code.
Options are @code{pygments} (the default), @code{kate},
@code{monochrome}, @code{espresso}, @code{zenburn}, @code{haddock}, and
@code{tango}. For more information on syntax highlighting in pandoc, see
@ref{#syntax-highlighting,Syntax highlighting}, below.

@item @code{-H} @emph{FILE}, @code{--include-in-header=}@emph{FILE}

Include contents of @emph{FILE}, verbatim, at the end of the header.
This can be used, for example, to include special CSS or javascript in
HTML documents. This option can be used repeatedly to include multiple
files in the header. They will be included in the order specified.
Implies @code{--standalone}.

@item @code{-B} @emph{FILE}, @code{--include-before-body=}@emph{FILE}

Include contents of @emph{FILE}, verbatim, at the beginning of the
document body (e.g. after the @code{<body>} tag in HTML, or the
@code{\begin@{document@}} command in LaTeX). This can be used to include
navigation bars or banners in HTML documents. This option can be used
repeatedly to include multiple files. They will be included in the order
specified. Implies @code{--standalone}.

@item @code{-A} @emph{FILE}, @code{--include-after-body=}@emph{FILE}

Include contents of @emph{FILE}, verbatim, at the end of the document
body (before the @code{</body>} tag in HTML, or the
@code{\end@{document@}} command in LaTeX). This option can be used
repeatedly to include multiple files. They will be included in the order
specified. Implies @code{--standalone}.

@end table

@node Options affecting specific writers
@section Options affecting specific writers
@anchor{#options-affecting-specific-writers}
@table @asis
@item @code{--self-contained}

Produce a standalone HTML file with no external dependencies, using
@code{data:} URIs to incorporate the contents of linked scripts,
stylesheets, images, and videos. The resulting file should be
"self-contained," in the sense that it needs no external files and no
net access to be displayed properly by a browser. This option works only
with HTML output formats, including @code{html}, @code{html5},
@code{html+lhs}, @code{html5+lhs}, @code{s5}, @code{slidy},
@code{slideous}, @code{dzslides}, and @code{revealjs}. Scripts, images,
and stylesheets at absolute URLs will be downloaded; those at relative
URLs will be sought relative to the working directory (if the first
source file is local) or relative to the base URL (if the first source
file is remote). Limitation: resources that are loaded dynamically
through JavaScript cannot be incorporated; as a result,
@code{--self-contained} does not work with @code{--mathjax}, and some
advanced features (e.g. zoom or speaker notes) may not work in an
offline "self-contained" @code{reveal.js} slide show.

@item @code{--html-q-tags}

Use @code{<q>} tags for quotes in HTML.

@item @code{--ascii}

Use only ascii characters in output. Currently supported only for HTML
output (which uses numerical entities instead of UTF-8 when this option
is selected).

@item @code{--reference-links}

Use reference-style links, rather than inline links, in writing Markdown
or reStructuredText. By default inline links are used.

@item @code{--atx-headers}

Use ATX-style headers in Markdown and asciidoc output. The default is to
use setext-style headers for levels 1-2, and then ATX headers.

@item @code{--chapters}

Treat top-level headers as chapters in LaTeX, ConTeXt, and DocBook
output. When the LaTeX document class is set to @code{report},
@code{book}, or @code{memoir} (unless the @code{article} option is
specified), this option is implied. If @code{beamer} is the output
format, top-level headers will become @code{\part@{..@}}.

@item @code{-N}, @code{--number-sections}

Number section headings in LaTeX, ConTeXt, HTML, or EPUB output. By
default, sections are not numbered. Sections with class
@code{unnumbered} will never be numbered, even if
@code{--number-sections} is specified.

@item @code{--number-offset=}@emph{NUMBER}[@code{,}@emph{NUMBER}@code{,}@emph{...}]

Offset for section headings in HTML output (ignored in other output
formats). The first number is added to the section number for top-level
headers, the second for second-level headers, and so on. So, for
example, if you want the first top-level header in your document to be
numbered "6", specify @code{--number-offset=5}. If your document starts
with a level-2 header which you want to be numbered "1.5", specify
@code{--number-offset=1,4}. Offsets are 0 by default. Implies
@code{--number-sections}.

@item @code{--no-tex-ligatures}

Do not use the TeX ligatures for quotation marks, apostrophes, and
dashes (@code{`...'}, @code{``..''}, @code{--}, @code{---}) when writing
or reading LaTeX or ConTeXt. In reading LaTeX, parse the characters
@code{`}, @code{'}, and @code{-} literally, rather than parsing
ligatures for quotation marks and dashes. In writing LaTeX or ConTeXt,
print unicode quotation mark and dash characters literally, rather than
converting them to the standard ASCII TeX ligatures. Note: normally
@code{--smart} is selected automatically for LaTeX and ConTeXt output,
but it must be specified explicitly if @code{--no-tex-ligatures} is
selected. If you use literal curly quotes, dashes, and ellipses in your
source, then you may want to use @code{--no-tex-ligatures} without
@code{--smart}.

@item @code{--listings}

Use the @uref{https://ctan.org/pkg/listings,@code{listings}} package for
LaTeX code blocks

@item @code{-i}, @code{--incremental}

Make list items in slide shows display incrementally (one by one). The
default is for lists to be displayed all at once.

@item @code{--slide-level=}@emph{NUMBER}

Specifies that headers with the specified level create slides (for
@code{beamer}, @code{s5}, @code{slidy}, @code{slideous},
@code{dzslides}). Headers above this level in the hierarchy are used to
divide the slide show into sections; headers below this level create
subheads within a slide. The default is to set the slide level based on
the contents of the document; see
@ref{#structuring-the-slide-show,Structuring the slide show}.

@item @code{--section-divs}

Wrap sections in @code{<div>} tags (or @code{<section>} tags in HTML5),
and attach identifiers to the enclosing @code{<div>} (or
@code{<section>}) rather than the header itself. See
@ref{#header-identifiers,Header identifiers}, below.

@item @code{--email-obfuscation=none}|@code{javascript}|@code{references}

Specify a method for obfuscating @code{mailto:} links in HTML documents.
@code{none} leaves @code{mailto:} links as they are. @code{javascript}
obfuscates them using javascript. @code{references} obfuscates them by
printing their letters as decimal or hexadecimal character references.
The default is @code{javascript}.

@item @code{--id-prefix=}@emph{STRING}

Specify a prefix to be added to all automatically generated identifiers
in HTML and DocBook output, and to footnote numbers in Markdown output.
This is useful for preventing duplicate identifiers when generating
fragments to be included in other pages.

@item @code{-T} @emph{STRING}, @code{--title-prefix=}@emph{STRING}

Specify @emph{STRING} as a prefix at the beginning of the title that
appears in the HTML header (but not in the title as it appears at the
beginning of the HTML body). Implies @code{--standalone}.

@item @code{-c} @emph{URL}, @code{--css=}@emph{URL}

Link to a CSS style sheet. This option can be used repeatedly to include
multiple files. They will be included in the order specified.

@item @code{--reference-odt=}@emph{FILE}

Use the specified file as a style reference in producing an ODT. For
best results, the reference ODT should be a modified version of an ODT
produced using pandoc. The contents of the reference ODT are ignored,
but its stylesheets are used in the new ODT. If no reference ODT is
specified on the command line, pandoc will look for a file
@code{reference.odt} in the user data directory (see @code{--data-dir}).
If this is not found either, sensible defaults will be used.

@item @code{--reference-docx=}@emph{FILE}

Use the specified file as a style reference in producing a docx file.
For best results, the reference docx should be a modified version of a
docx file produced using pandoc. The contents of the reference docx are
ignored, but its stylesheets and document properties (including margins,
page size, header, and footer) are used in the new docx. If no reference
docx is specified on the command line, pandoc will look for a file
@code{reference.docx} in the user data directory (see
@code{--data-dir}). If this is not found either, sensible defaults will
be used. The following styles are used by pandoc: [paragraph] Normal,
Body Text, First Paragraph, Compact, Title, Subtitle, Author, Date,
Abstract, Bibliography, Heading 1, Heading 2, Heading 3, Heading 4,
Heading 5, Heading 6, Block Text, Footnote Text, Definition Term,
Definition, Caption, Table Caption, Image Caption, Figure, Figure With
Caption, TOC Heading; [character] Default Paragraph Font, Body Text
Char, Verbatim Char, Footnote Reference, Hyperlink; [table] Normal
Table.

@item @code{--epub-stylesheet=}@emph{FILE}

Use the specified CSS file to style the EPUB. If no stylesheet is
specified, pandoc will look for a file @code{epub.css} in the user data
directory (see @code{--data-dir}). If it is not found there, sensible
defaults will be used.

@item @code{--epub-cover-image=}@emph{FILE}

Use the specified image as the EPUB cover. It is recommended that the
image be less than 1000px in width and height. Note that in a Markdown
source document you can also specify @code{cover-image} in a YAML
metadata block (see @ref{#epub-metadata,EPUB Metadata}, below).

@item @code{--epub-metadata=}@emph{FILE}

Look in the specified XML file for metadata for the EPUB. The file
should contain a series of
@uref{http://dublincore.org/documents/dces/,Dublin Core elements}. For
example:

@verbatim
 <dc:rights>Creative Commons</dc:rights>
 <dc:language>es-AR</dc:language>
@end verbatim

By default, pandoc will include the following metadata elements:
@code{<dc:title>} (from the document title), @code{<dc:creator>} (from
the document authors), @code{<dc:date>} (from the document date, which
should be in @uref{http://www.w3.org/TR/NOTE-datetime,ISO 8601 format}),
@code{<dc:language>} (from the @code{lang} variable, or, if is not set,
the locale), and @code{<dc:identifier id="BookId">} (a randomly
generated UUID). Any of these may be overridden by elements in the
metadata file.

Note: if the source document is Markdown, a YAML metadata block in the
document can be used instead. See below under @ref{#epub-metadata,EPUB
Metadata}.

@item @code{--epub-embed-font=}@emph{FILE}

Embed the specified font in the EPUB. This option can be repeated to
embed multiple fonts. Wildcards can also be used: for example,
@code{DejaVuSans-*.ttf}. However, if you use wildcards on the command
line, be sure to escape them or put the whole filename in single quotes,
to prevent them from being interpreted by the shell. To use the embedded
fonts, you will need to add declarations like the following to your CSS
(see @code{--epub-stylesheet}):

@verbatim
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: normal;
src:url("DejaVuSans-Regular.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: bold;
src:url("DejaVuSans-Bold.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: normal;
src:url("DejaVuSans-Oblique.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: bold;
src:url("DejaVuSans-BoldOblique.ttf");
}
body { font-family: "DejaVuSans"; }
@end verbatim

@item @code{--epub-chapter-level=}@emph{NUMBER}

Specify the header level at which to split the EPUB into separate
"chapter" files. The default is to split into chapters at level 1
headers. This option only affects the internal composition of the EPUB,
not the way chapters and sections are displayed to users. Some readers
may be slow if the chapter files are too large, so for large documents
with few level 1 headers, one might want to use a chapter level of 2 or
3.

@item @code{--latex-engine=pdflatex}|@code{lualatex}|@code{xelatex}

Use the specified LaTeX engine when producing PDF output. The default is
@code{pdflatex}. If the engine is not in your PATH, the full path of the
engine may be specified here.

@item @code{--latex-engine-opt=}@emph{STRING}

Use the given string as a command-line argument to the
@code{latex-engine}. If used multiple times, the arguments are provided
with spaces between them. Note that no check for duplicate options is
done.

@end table

@node Citation rendering
@section Citation rendering
@anchor{#citation-rendering}
@table @asis
@item @code{--bibliography=}@emph{FILE}

Set the @code{bibliography} field in the document's metadata to
@emph{FILE}, overriding any value set in the metadata, and process
citations using @code{pandoc-citeproc}. (This is equivalent to
@code{--metadata bibliography=FILE --filter pandoc-citeproc}.) If
@code{--natbib} or @code{--biblatex} is also supplied,
@code{pandoc-citeproc} is not used, making this equivalent to
@code{--metadata bibliography=FILE}. If you supply this argument
multiple times, each @emph{FILE} will be added to bibliography.

@item @code{--csl=}@emph{FILE}

Set the @code{csl} field in the document's metadata to @emph{FILE},
overriding any value set in the metadata. (This is equivalent to
@code{--metadata csl=FILE}.) This option is only relevant with
@code{pandoc-citeproc}.

@item @code{--citation-abbreviations=}@emph{FILE}

Set the @code{citation-abbreviations} field in the document's metadata
to @emph{FILE}, overriding any value set in the metadata. (This is
equivalent to @code{--metadata citation-abbreviations=FILE}.) This
option is only relevant with @code{pandoc-citeproc}.

@item @code{--natbib}

Use @uref{https://ctan.org/pkg/natbib,@code{natbib}} for citations in
LaTeX output. This option is not for use with the @code{pandoc-citeproc}
filter or with PDF output. It is intended for use in producing a LaTeX
file that can be processed with
@uref{https://ctan.org/pkg/bibtex,@code{bibtex}}.

@item @code{--biblatex}

Use @uref{https://ctan.org/pkg/biblatex,@code{biblatex}} for citations
in LaTeX output. This option is not for use with the
@code{pandoc-citeproc} filter or with PDF output. It is intended for use
in producing a LaTeX file that can be processed with
@uref{https://ctan.org/pkg/bibtex,@code{bibtex}} or
@uref{https://ctan.org/pkg/biber,@code{biber}}.

@end table

@node Math rendering in HTML
@section Math rendering in HTML
@anchor{#math-rendering-in-html}
@table @asis
@item @code{-m} [@emph{URL}], @code{--latexmathml}[@code{=}@emph{URL}]

Use the @uref{http://math.etsu.edu/LaTeXMathML/,LaTeXMathML} script to
display embedded TeX math in HTML output. To insert a link to a local
copy of the @code{LaTeXMathML.js} script, provide a @emph{URL}. If no
@emph{URL} is provided, the contents of the script will be inserted
directly into the HTML header, preserving portability at the price of
efficiency. If you plan to use math on several pages, it is much better
to link to a copy of the script, so it can be cached.

@item @code{--mathml}[@code{=}@emph{URL}]

Convert TeX math to @uref{http://www.w3.org/Math/,MathML} (in
@code{docbook} as well as @code{html} and @code{html5}). In standalone
@code{html} output, a small javascript (or a link to such a script if a
@emph{URL} is supplied) will be inserted that allows the MathML to be
viewed on some browsers.

@item @code{--jsmath}[@code{=}@emph{URL}]

Use @uref{http://www.math.union.edu/~dpvc/jsmath/,jsMath} to display
embedded TeX math in HTML output. The @emph{URL} should point to the
jsMath load script (e.g. @code{jsMath/easy/load.js}); if provided, it
will be linked to in the header of standalone HTML documents. If a
@emph{URL} is not provided, no link to the jsMath load script will be
inserted; it is then up to the author to provide such a link in the HTML
template.

@item @code{--mathjax}[@code{=}@emph{URL}]

Use @uref{https://www.mathjax.org,MathJax} to display embedded TeX math
in HTML output. The @emph{URL} should point to the @code{MathJax.js}
load script. If a @emph{URL} is not provided, a link to the MathJax CDN
will be inserted.

@item @code{--gladtex}

Enclose TeX math in @code{<eq>} tags in HTML output. These can then be
processed by @uref{http://ans.hsh.no/home/mgg/gladtex/,gladTeX} to
produce links to images of the typeset formulas.

@item @code{--mimetex}[@code{=}@emph{URL}]

Render TeX math using the
@uref{http://www.forkosh.com/mimetex.html,mimeTeX} CGI script. If
@emph{URL} is not specified, it is assumed that the script is at
@code{/cgi-bin/mimetex.cgi}.

@item @code{--webtex}[@code{=}@emph{URL}]

Render TeX formulas using an external script that converts TeX formulas
to images. The formula will be concatenated with the URL provided. If
@emph{URL} is not specified, the Google Chart API will be used.

@item @code{--katex}[@code{=}@emph{URL}]

Use @uref{https://github.com/Khan/KaTeX,KaTeX} to display embedded TeX
math in HTML output. The @emph{URL} should point to the @code{katex.js}
load script. If a @emph{URL} is not provided, a link to the KaTeX CDN
will be inserted.

@item @code{--katex-stylesheet=}@emph{URL}

The @emph{URL} should point to the @code{katex.css} stylesheet. If this
option is not specified, a link to the KaTeX CDN will be inserted. Note
that this option does not imply @code{--katex}.

@end table

@node Options for wrapper scripts
@section Options for wrapper scripts
@anchor{#options-for-wrapper-scripts}
@table @asis
@item @code{--dump-args}

Print information about command-line arguments to @emph{stdout}, then
exit. This option is intended primarily for use in wrapper scripts. The
first line of output contains the name of the output file specified with
the @code{-o} option, or @code{-} (for @emph{stdout}) if no output file
was specified. The remaining lines contain the command-line arguments,
one per line, in the order they appear. These do not include regular
pandoc options and their arguments, but do include any options appearing
after a @code{--} separator at the end of the line.

@item @code{--ignore-args}

Ignore command-line arguments (for use in wrapper scripts). Regular
pandoc options are not ignored. Thus, for example,

@verbatim
pandoc --ignore-args -o foo.html -s foo.txt -- -e latin1
@end verbatim

is equivalent to

@verbatim
pandoc -o foo.html -s
@end verbatim

@end table

@node Templates
@chapter Templates
@anchor{#templates}
When the @code{-s/--standalone} option is used, pandoc uses a template
to add header and footer material that is needed for a self-standing
document. To see the default template that is used, just type

@verbatim
pandoc -D *FORMAT*
@end verbatim

where @emph{FORMAT} is the name of the output format. A custom template
can be specified using the @code{--template} option. You can also
override the system default templates for a given output format
@emph{FORMAT} by putting a file @code{templates/default.*FORMAT*} in the
user data directory (see @code{--data-dir}, above). @emph{Exceptions:}

@itemize
@item
For @code{odt} output, customize the @code{default.opendocument}
template.
@item
For @code{pdf} output, customize the @code{default.latex} template (or
the @code{default.beamer} template, if you use @code{-t beamer}, or the
@code{default.context} template, if you use @code{-t context}).
@item
@code{docx} has no template (however, you can use
@code{--reference-docx} to customize the output).
@end itemize

Templates contain @emph{variables}, which allow for the inclusion of
arbitrary information at any point in the file. Variables may be set
within the document using @ref{#extension-yaml_metadata_block,YAML
metadata blocks}. They may also be set at the command line using the
@code{-V/--variable} option: variables set in this way override metadata
fields with the same name.
@menu
* Variables set by pandoc::
* Language variables::
* Variables for slides::
* Variables for LaTeX::
* Variables for ConTeXt::
* Variables for man pages::
* Using variables in templates::
@end menu

@node Variables set by pandoc
@section Variables set by pandoc
@anchor{#variables-set-by-pandoc}
Some variables are set automatically by pandoc. These vary somewhat
depending on the output format, but include metadata fields as well as
the following:

@table @asis
@item @code{title}, @code{author}, @code{date}

allow identification of basic aspects of the document. Included in PDF
metadata through LaTeX and ConTeXt. These can be set through a
@ref{#extension-pandoc_title_block,pandoc title block}, which allows for
multiple authors, or through a YAML metadata block:

@verbatim
---
author:
- Aristotle
- Peter Abelard
...
@end verbatim

@item @code{subtitle}

document subtitle, included in HTML, EPUB, LaTeX, ConTeXt, and Word
docx; renders in LaTeX only when using a document class that supports
@code{\subtitle}, such as @code{beamer} or the
@uref{https://ctan.org/pkg/koma-script,KOMA-Script} series
(@code{scrartcl}, @code{scrreprt}, @code{scrbook}).@footnote{To make
@code{subtitle} work with other LaTeX document classes, you can add the
following to @code{header-includes}:

@verbatim
\providecommand{\subtitle}[1]{%
  \usepackage{titling}
  \posttitle{%
    \par\large#1\end{center}}
}
@end verbatim

}
@item @code{institute}

author affiliations (in LaTeX and Beamer only). Can be a list, when
there are multiple authors.
@item @code{abstract}

document summary, included in LaTeX, ConTeXt, AsciiDoc, and Word docx
@item @code{keywords}

list of keywords to be included in HTML, PDF, and AsciiDoc metadata; may
be repeated as for @code{author}, above
@item @code{header-includes}

contents specified by @code{-H/--include-in-header} (may have multiple
values)
@item @code{toc}

non-null value if @code{--toc/--table-of-contents} was specified
@item @code{toc-title}

title of table of contents (works only with EPUB and docx)
@item @code{include-before}

contents specified by @code{-B/--include-before-body} (may have multiple
values)
@item @code{include-after}

contents specified by @code{-A/--include-after-body} (may have multiple
values)
@item @code{body}

body of document
@item @code{meta-json}

JSON representation of all of the document's metadata
@end table

@node Language variables
@section Language variables
@anchor{#language-variables}
@table @asis
@item @code{lang}

identifies the main language of the document, using a code according to
@uref{https://tools.ietf.org/html/bcp47,BCP 47} (e.g. @code{en} or
@code{en-GB}). For some output formats, pandoc will convert it to an
appropriate format stored in the additional variables @code{babel-lang},
@code{polyglossia-lang} (LaTeX) and @code{context-lang} (ConTeXt).

Native pandoc @code{span}s and @code{div}s with the lang attribute
(value in BCP 47) can be used to switch the language in that range.

@item @code{otherlangs}

a list of other languages used in the document in the YAML metadata,
according to @uref{https://tools.ietf.org/html/bcp47,BCP 47}. For
example: @code{otherlangs: [en-GB, fr]}. This is automatically generated
from the @code{lang} attributes in all @code{span}s and @code{div}s but
can be overridden. Currently only used by LaTeX through the generated
@code{babel-otherlangs} and @code{polyglossia-otherlangs} variables. The
LaTeX writer outputs polyglossia commands in the text but the
@code{babel-newcommands} variable contains mappings for them to the
corresponding babel.
@item @code{dir}

the base direction of the document, either @code{rtl} (right-to-left) or
@code{ltr} (left-to-right).

For bidirectional documents, native pandoc @code{span}s and @code{div}s
with the @code{dir} attribute (value @code{rtl} or @code{ltr}) can be
used to override the base direction in some output formats. This may not
always be necessary if the final renderer (e.g. the browser, when
generating HTML) supports the
@uref{http://www.w3.org/International/articles/inline-bidi-markup/uba-basics,Unicode
Bidirectional Algorithm}.

When using LaTeX for bidirectional documents, only the @code{xelatex}
engine is fully supported (use @code{--latex-engine=xelatex}).

@end table

@node Variables for slides
@section Variables for slides
@anchor{#variables-for-slides}
Variables are available for
@ref{#producing-slide-shows-with-pandoc,producing slide shows with
pandoc}, including all
@uref{https://github.com/hakimel/reveal.js#configuration,reveal.js
configuration options}.

@table @asis
@item @code{slidy-url}

base URL for Slidy documents (defaults to
@code{http://www.w3.org/Talks/Tools/Slidy2})
@item @code{slideous-url}

base URL for Slideous documents (defaults to @code{slideous})
@item @code{s5-url}

base URL for S5 documents (defaults to @code{s5/default})
@item @code{revealjs-url}

base URL for reveal.js documents (defaults to @code{reveal.js})
@item @code{theme}, @code{colortheme}, @code{fonttheme},
@code{innertheme}, @code{outertheme}

themes for LaTeX @uref{https://ctan.org/pkg/beamer,@code{beamer}}
documents
@item @code{navigation}

controls navigation symbols in @code{beamer} documents (default is
@code{empty} for no navigation symbols; other valid values are
@code{frame}, @code{vertical}, and @code{horizontal}).
@item @code{section-titles}

enables on "title pages" for new sections in @code{beamer} documents
(default = true).
@end table

@node Variables for LaTeX
@section Variables for LaTeX
@anchor{#variables-for-latex}
LaTeX variables are used when @ref{#creating-a-pdf,creating a PDF}.

@table @asis
@item @code{papersize}

paper size, e.g. @code{letter}, @code{A4}
@item @code{fontsize}

font size for body text (e.g. @code{10pt}, @code{12pt})
@item @code{documentclass}

document class, e.g. @uref{https://ctan.org/pkg/article,@code{article}},
@uref{https://ctan.org/pkg/report,@code{report}},
@uref{https://ctan.org/pkg/book,@code{book}},
@uref{https://ctan.org/pkg/memoir,@code{memoir}}
@item @code{classoption}

option for document class, e.g. @code{oneside}; may be repeated for
multiple options
@item @code{geometry}

option for @uref{https://ctan.org/pkg/geometry,@code{geometry}} package,
e.g. @code{margin=1in}; may be repeated for multiple options
@item @code{margin-left}, @code{margin-right}, @code{margin-top},
@code{margin-bottom}

sets margins, if @code{geometry} is not used (otherwise @code{geometry}
overrides these)
@item @code{linestretch}

adjusts line spacing using the
@uref{https://ctan.org/pkg/setspace,@code{setspace}} package, e.g.
@code{1.25}, @code{1.5}
@item @code{fontfamily}

font package for use with @code{pdflatex}:
@uref{http://www.tug.org/texlive/,TeX Live} includes many options,
documented in the @uref{http://www.tug.dk/FontCatalogue/,LaTeX Font
Catalogue}. The default is @uref{https://ctan.org/pkg/lm,Latin Modern}.
@item @code{fontfamilyoptions}

options for package used as @code{fontfamily}: e.g. @code{osf,sc} with
@code{fontfamily} set to
@uref{https://ctan.org/pkg/mathpazo,@code{mathpazo}} provides Palatino
with old-style figures and true small caps; may be repeated for multiple
options
@item @code{mainfont}, @code{sansfont}, @code{monofont},
@code{mathfont}, @code{CJKmainfont}

font families for use with @code{xelatex} or @code{lualatex}: take the
name of any system font, using the
@uref{https://ctan.org/pkg/fontspec,@code{fontspec}} package. Note that
if @code{CJKmainfont} is used, the
@uref{https://ctan.org/pkg/xecjk,@code{xecjk}} package must be
available.
@item @code{mainfontoptions}, @code{sansfontoptions},
@code{monofontoptions}, @code{mathfontoptions}, @code{CJKoptions}

options to use with @code{mainfont}, @code{sansfont}, @code{monofont},
@code{mathfont}, @code{CJKmainfont} in @code{xelatex} and
@code{lualatex}. Allow for any choices available through
@uref{https://ctan.org/pkg/fontspec,@code{fontspec}}, such as the
OpenType features @code{Numbers=OldStyle,Numbers=Proportional}. May be
repeated for multiple options.
@item @code{fontenc}

allows font encoding to be specified through @code{fontenc} package
(with @code{pdflatex}); default is @code{T1} (see guide to
@uref{https://ctan.org/pkg/encguide,LaTeX font encodings})
@item @code{colorlinks}

add color to link text; automatically enabled if any of
@code{linkcolor}, @code{citecolor}, @code{urlcolor}, or @code{toccolor}
are set
@item @code{linkcolor}, @code{citecolor}, @code{urlcolor},
@code{toccolor}

color for internal links, citation links, external links, and links in
table of contents: uses any of the
@uref{https://en.wikibooks.org/wiki/LaTeX/Colors#Predefined_colors,predefined
LaTeX colors}
@item @code{links-as-notes}

causes links to be printed as footnotes
@item @code{indent}

uses document class settings for indentation (the default LaTeX template
otherwise removes indentation and adds space between paragraphs)
@item @code{subparagraph}

disables default behavior of LaTeX template that redefines
(sub)paragraphs as sections, changing the appearance of nested headings
in some classes
@item @code{thanks}

specifies contents of acknowledgments footnote after document title.
@item @code{toc}

include table of contents (can also be set using
@code{--toc/--table-of-contents})
@item @code{toc-depth}

level of section to include in table of contents
@item @code{lof}, @code{lot}

include list of figures, list of tables
@item @code{bibliography}

bibliography to use for resolving references
@item @code{biblio-style}

bibliography style, when used with @code{--natbib} and
@code{--biblatex}.
@item @code{biblatexoptions}

list of options for biblatex.
@end table

@node Variables for ConTeXt
@section Variables for ConTeXt
@anchor{#variables-for-context}
@table @asis
@item @code{papersize}

paper size, e.g. @code{letter}, @code{A4}, @code{landscape} (see
@uref{http://wiki.contextgarden.net/PaperSetup,ConTeXt Paper Setup});
may be repeated for multiple options
@item @code{layout}

options for page margins and text arrangement (see
@uref{http://wiki.contextgarden.net/Layout,ConTeXt Layout}); may be
repeated for multiple options
@item @code{margin-left}, @code{margin-right}, @code{margin-top},
@code{margin-bottom}

sets margins, if @code{layout} is not used (otherwise @code{layout}
overrides these)
@item @code{fontsize}

font size for body text (e.g. @code{10pt}, @code{12pt})
@item @code{mainfont}, @code{sansfont}, @code{monofont}, @code{mathfont}

font families: take the name of any system font (see
@uref{http://wiki.contextgarden.net/Font_Switching,ConTeXt Font
Switching})
@item @code{linkcolor}, @code{contrastcolor}

color for links outside and inside a page, e.g. @code{red}, @code{blue}
(see @uref{http://wiki.contextgarden.net/Color,ConTeXt Color})
@item @code{linkstyle}

typeface style for links, e.g. @code{normal}, @code{bold},
@code{slanted}, @code{boldslanted}, @code{type}, @code{cap},
@code{small}
@item @code{indenting}

controls indentation of paragraphs, e.g. @code{yes,small,next} (see
@uref{http://wiki.contextgarden.net/Indentation,ConTeXt Indentation});
may be repeated for multiple options
@item @code{whitespace}

spacing between paragraphs, e.g. @code{none}, @code{small} (using
@uref{http://wiki.contextgarden.net/Command/setupwhitespace,@code{setupwhitespace}})
@item @code{interlinespace}

adjusts line spacing, e.g. @code{4ex} (using
@uref{http://wiki.contextgarden.net/Command/setupinterlinespace,@code{setupinterlinespace}});
may be repeated for multiple options
@item @code{headertext}, @code{footertext}

text to be placed in running header or footer (see
@uref{http://wiki.contextgarden.net/Headers_and_Footers,ConTeXt Headers
and Footers}); may be repeated up to four times for different placement
@item @code{pagenumbering}

page number style and location (using
@uref{http://wiki.contextgarden.net/Command/setuppagenumbering,@code{setuppagenumbering}});
may be repeated for multiple options
@item @code{toc}

include table of contents (can also be set using
@code{--toc/--table-of-contents})
@item @code{lof}, @code{lot}

include list of figures, list of tables
@end table

@node Variables for man pages
@section Variables for man pages
@anchor{#variables-for-man-pages}
@table @asis
@item @code{section}

section number in man pages
@item @code{header}

header in man pages
@item @code{footer}

footer in man pages
@item @code{adjusting}

adjusts text to left (@code{l}), right (@code{r}), center (@code{c}), or
both (@code{b}) margins
@item @code{hyphenate}

if @code{true} (the default), hyphenation will be used
@end table

@node Using variables in templates
@section Using variables in templates
@anchor{#using-variables-in-templates}
Variable names are sequences of alphanumerics, @code{-}, and @code{_},
starting with a letter. A variable name surrounded by @code{$} signs
will be replaced by its value. For example, the string @code{$title$} in

@verbatim
<title>$title$</title>
@end verbatim

will be replaced by the document title.

To write a literal @code{$} in a template, use @code{$$}.

Templates may contain conditionals. The syntax is as follows:

@verbatim
$if(variable)$
X
$else$
Y
$endif$
@end verbatim

This will include @code{X} in the template if @code{variable} has a
non-null value; otherwise it will include @code{Y}. @code{X} and
@code{Y} are placeholders for any valid template text, and may include
interpolated variables or other conditionals. The @code{$else$} section
may be omitted.

When variables can have multiple values (for example, @code{author} in a
multi-author document), you can use the @code{$for$} keyword:

@verbatim
$for(author)$
<meta name="author" content="$author$" />
$endfor$
@end verbatim

You can optionally specify a separator to be used between consecutive
items:

@verbatim
$for(author)$$author$$sep$, $endfor$
@end verbatim

A dot can be used to select a field of a variable that takes an object
as its value. So, for example:

@verbatim
$author.name$ ($author.affiliation$)
@end verbatim

If you use custom templates, you may need to revise them as pandoc
changes. We recommend tracking the changes in the default templates, and
modifying your custom templates accordingly. An easy way to do this is
to fork the
@uref{https://github.com/jgm/pandoc-templates,pandoc-templates}
repository and merge in changes after each pandoc release.

@node Pandoc's Markdown
@chapter Pandoc's Markdown
@anchor{#pandocs-markdown}
Pandoc understands an extended and slightly revised version of John
Gruber's @uref{http://daringfireball.net/projects/markdown/,Markdown}
syntax. This document explains the syntax, noting differences from
standard Markdown. Except where noted, these differences can be
suppressed by using the @code{markdown_strict} format instead of
@code{markdown}. An extensions can be enabled by adding
@code{+EXTENSION} to the format name and disabled by adding
@code{-EXTENSION}. For example, @code{markdown_strict+footnotes} is
strict Markdown with footnotes enabled, while
@code{markdown-footnotes-pipe_tables} is pandoc's Markdown without
footnotes or pipe tables.
@menu
* Philosophy::
* Paragraphs::
* Headers::
* Block quotations::
* Verbatim code blocks::
* Line blocks::
* Lists::
* Horizontal rules::
* Tables::
* Metadata blocks::
* Backslash escapes::
* Smart punctuation::
* Inline formatting::
* Math::
* Raw HTML::
* Raw TeX::
* LaTeX macros::
* Links::
* Images::
* Footnotes::
* Citations::
* Non-pandoc extensions::
* Markdown variants::
* Extensions with formats other than Markdown::
@end menu

@node Philosophy
@section Philosophy
@anchor{#philosophy}
Markdown is designed to be easy to write, and, even more importantly,
easy to read:

@quotation
A Markdown-formatted document should be publishable as-is, as plain
text, without looking like it's been marked up with tags or formatting
instructions. --
@uref{http://daringfireball.net/projects/markdown/syntax#philosophy,John
Gruber}
@end quotation
This principle has guided pandoc's decisions in finding syntax for
tables, footnotes, and other extensions.

There is, however, one respect in which pandoc's aims are different from
the original aims of Markdown. Whereas Markdown was originally designed
with HTML generation in mind, pandoc is designed for multiple output
formats. Thus, while pandoc allows the embedding of raw HTML, it
discourages it, and provides other, non-HTMLish ways of representing
important document elements like definition lists, tables, mathematics,
and footnotes.

@node Paragraphs
@section Paragraphs
@anchor{#paragraphs}
A paragraph is one or more lines of text followed by one or more blank
lines. Newlines are treated as spaces, so you can reflow your paragraphs
as you like. If you need a hard line break, put two or more spaces at
the end of a line.

@node Extension escaped_line_breaks
@subsubsection Extension: @code{escaped_line_breaks}
@anchor{#extension-escaped_line_breaks}
A backslash followed by a newline is also a hard line break. Note: in
multiline and grid table cells, this is the only way to create a hard
line break, since trailing spaces in the cells are ignored.

@node Headers
@section Headers
@anchor{#headers}
There are two kinds of headers: Setext and ATX.
@menu
* Setext-style headers::
* ATX-style headers::
* Header identifiers::
@end menu

@node Setext-style headers
@subsection Setext-style headers
@anchor{#setext-style-headers}
A setext-style header is a line of text "underlined" with a row of
@code{=} signs (for a level one header) or @code{-} signs (for a level
two header):

@verbatim
A level-one header
==================

A level-two header
------------------
@end verbatim

The header text can contain inline formatting, such as emphasis (see
@ref{#inline-formatting,Inline formatting}, below).

@node ATX-style headers
@subsection ATX-style headers
@anchor{#atx-style-headers}
An ATX-style header consists of one to six @code{#} signs and a line of
text, optionally followed by any number of @code{#} signs. The number of
@code{#} signs at the beginning of the line is the header level:

@verbatim
## A level-two header

### A level-three header ###
@end verbatim

As with setext-style headers, the header text can contain formatting:

@verbatim
# A level-one header with a [link](/url) and *emphasis*
@end verbatim

@menu
* Extension blank_before_header::
@end menu

@node Extension blank_before_header
@subsubsection Extension: @code{blank_before_header}
@anchor{#extension-blank_before_header}
Standard Markdown syntax does not require a blank line before a header.
Pandoc does require this (except, of course, at the beginning of the
document). The reason for the requirement is that it is all too easy for
a @code{#} to end up at the beginning of a line by accident (perhaps
through line wrapping). Consider, for example:

@verbatim
I like several of their flavors of ice cream:
#22, for example, and #5.
@end verbatim

@node Header identifiers
@subsection Header identifiers
@anchor{#header-identifiers}
@menu
* Extension header_attributes::
* Extension auto_identifiers::
* Extension implicit_header_references::
@end menu

@node Extension header_attributes
@subsubsection Extension: @code{header_attributes}
@anchor{#extension-header_attributes}
Headers can be assigned attributes using this syntax at the end of the
line containing the header text:

@verbatim
{#identifier .class .class key=value key=value}
@end verbatim

Thus, for example, the following headers will all be assigned the
identifier @code{foo}:

@verbatim
# My header {#foo}

## My header ##    {#foo}

My other header   {#foo}
---------------
@end verbatim

(This syntax is compatible with
@uref{https://michelf.ca/projects/php-markdown/extra/,PHP Markdown
Extra}.)

Note that although this syntax allows assignment of classes and
key/value attributes, writers generally don't use all of this
information. Identifiers, classes, and key/value attributes are used in
HTML and HTML-based formats such as EPUB and slidy. Identifiers are used
for labels and link anchors in the LaTeX, ConTeXt, Textile, and AsciiDoc
writers.

Headers with the class @code{unnumbered} will not be numbered, even if
@code{--number-sections} is specified. A single hyphen (@code{-}) in an
attribute context is equivalent to @code{.unnumbered}, and preferable in
non-English documents. So,

@verbatim
# My header {-}
@end verbatim

is just the same as

@verbatim
# My header {.unnumbered}
@end verbatim

@node Extension auto_identifiers
@subsubsection Extension: @code{auto_identifiers}
@anchor{#extension-auto_identifiers}
A header without an explicitly specified identifier will be
automatically assigned a unique identifier based on the header text. To
derive the identifier from the header text,

@itemize
@item
Remove all formatting, links, etc.
@item
Remove all footnotes.
@item
Remove all punctuation, except underscores, hyphens, and periods.
@item
Replace all spaces and newlines with hyphens.
@item
Convert all alphabetic characters to lowercase.
@item
Remove everything up to the first letter (identifiers may not begin with
a number or punctuation mark).
@item
If nothing is left after this, use the identifier @code{section}.
@end itemize

Thus, for example,

@multitable {@code{Header identifiers in HTML}} {@code{header-identifiers-in-html}} 
@headitem 
Header
 @tab Identifier
@item 
@code{Header identifiers in HTML}
 @tab @code{header-identifiers-in-html}
@item 
@code{*Dogs*?--in *my* house?}
 @tab @code{dogs--in-my-house}
@item 
@code{[HTML], [S5], or [RTF]?}
 @tab @code{html-s5-or-rtf}
@item 
@code{3. Applications}
 @tab @code{applications}
@item 
@code{33}
 @tab @code{section}
@end multitable

These rules should, in most cases, allow one to determine the identifier
from the header text. The exception is when several headers have the
same text; in this case, the first will get an identifier as described
above; the second will get the same identifier with @code{-1} appended;
the third with @code{-2}; and so on.

These identifiers are used to provide link targets in the table of
contents generated by the @code{--toc|--table-of-contents} option. They
also make it easy to provide links from one section of a document to
another. A link to this section, for example, might look like this:

@verbatim
See the section on
[header identifiers](#header-identifiers-in-html-latex-and-context).
@end verbatim

Note, however, that this method of providing links to sections works
only in HTML, LaTeX, and ConTeXt formats.

If the @code{--section-divs} option is specified, then each section will
be wrapped in a @code{div} (or a @code{section}, if @code{--html5} was
specified), and the identifier will be attached to the enclosing
@code{<div>} (or @code{<section>}) tag rather than the header itself.
This allows entire sections to be manipulated using javascript or
treated differently in CSS.

@node Extension implicit_header_references
@subsubsection Extension: @code{implicit_header_references}
@anchor{#extension-implicit_header_references}
Pandoc behaves as if reference links have been defined for each header.
So, instead of

@verbatim
[header identifiers](#header-identifiers-in-html)
@end verbatim

you can simply write

@verbatim
[header identifiers]
@end verbatim

or

@verbatim
[header identifiers][]
@end verbatim

or

@verbatim
[the section on header identifiers][header identifiers]
@end verbatim

If there are multiple headers with identical text, the corresponding
reference will link to the first one only, and you will need to use
explicit links to link to the others, as described above.

Like regular reference links, these references are case-insensitive.

Explicit link reference definitions always take priority over implicit
header references. So, in the following example, the link will point to
@code{bar}, not to @code{#foo}:

@verbatim
# Foo

[foo]: bar

See [foo]
@end verbatim

@node Block quotations
@section Block quotations
@anchor{#block-quotations}
Markdown uses email conventions for quoting blocks of text. A block
quotation is one or more paragraphs or other block elements (such as
lists or headers), with each line preceded by a @code{>} character and
an optional space. (The @code{>} need not start at the left margin, but
it should not be indented more than three spaces.)

@verbatim
> This is a block quote. This
> paragraph has two lines.
>
> 1. This is a list inside a block quote.
> 2. Second item.
@end verbatim

A "lazy" form, which requires the @code{>} character only on the first
line of each block, is also allowed:

@verbatim
> This is a block quote. This
paragraph has two lines.

> 1. This is a list inside a block quote.
2. Second item.
@end verbatim

Among the block elements that can be contained in a block quote are
other block quotes. That is, block quotes can be nested:

@verbatim
> This is a block quote.
>
> > A block quote within a block quote.
@end verbatim

If the @code{>} character is followed by an optional space, that space
will be considered part of the block quote marker and not part of the
indentation of the contents. Thus, to put an indented code block in a
block quote, you need five spaces after the @code{>}:

@verbatim
>     code
@end verbatim

@node Extension blank_before_blockquote
@subsubsection Extension: @code{blank_before_blockquote}
@anchor{#extension-blank_before_blockquote}
Standard Markdown syntax does not require a blank line before a block
quote. Pandoc does require this (except, of course, at the beginning of
the document). The reason for the requirement is that it is all too easy
for a @code{>} to end up at the beginning of a line by accident (perhaps
through line wrapping). So, unless the @code{markdown_strict} format is
used, the following does not produce a nested block quote in pandoc:

@verbatim
> This is a block quote.
>> Nested.
@end verbatim

@node Verbatim code blocks
@section Verbatim (code) blocks
@anchor{#verbatim-code-blocks}
@menu
* Indented code blocks::
* Fenced code blocks::
@end menu

@node Indented code blocks
@subsection Indented code blocks
@anchor{#indented-code-blocks}
A block of text indented four spaces (or one tab) is treated as verbatim
text: that is, special characters do not trigger special formatting, and
all spaces and line breaks are preserved. For example,

@verbatim
    if (a > 3) {
      moveShip(5 * gravity, DOWN);
    }
@end verbatim

The initial (four space or one tab) indentation is not considered part
of the verbatim text, and is removed in the output.

Note: blank lines in the verbatim text need not begin with four spaces.

@node Fenced code blocks
@subsection Fenced code blocks
@anchor{#fenced-code-blocks}
@menu
* Extension fenced_code_blocks::
* Extension backtick_code_blocks::
* Extension fenced_code_attributes::
@end menu

@node Extension fenced_code_blocks
@subsubsection Extension: @code{fenced_code_blocks}
@anchor{#extension-fenced_code_blocks}
In addition to standard indented code blocks, pandoc supports
@emph{fenced} code blocks. These begin with a row of three or more
tildes (@code{~}) and end with a row of tildes that must be at least as
long as the starting row. Everything between these lines is treated as
code. No indentation is necessary:

@verbatim
~~~~~~~
if (a > 3) {
  moveShip(5 * gravity, DOWN);
}
~~~~~~~
@end verbatim

Like regular code blocks, fenced code blocks must be separated from
surrounding text by blank lines.

If the code itself contains a row of tildes or backticks, just use a
longer row of tildes or backticks at the start and end:

@verbatim
~~~~~~~~~~~~~~~~
~~~~~~~~~~
code including tildes
~~~~~~~~~~
~~~~~~~~~~~~~~~~
@end verbatim

@node Extension backtick_code_blocks
@subsubsection Extension: @code{backtick_code_blocks}
@anchor{#extension-backtick_code_blocks}
Same as @code{fenced_code_blocks}, but uses backticks (@code{`}) instead
of tildes (@code{~}).

@node Extension fenced_code_attributes
@subsubsection Extension: @code{fenced_code_attributes}
@anchor{#extension-fenced_code_attributes}
Optionally, you may attach attributes to fenced or backtick code block
using this syntax:

@verbatim
~~~~ {#mycode .haskell .numberLines startFrom="100"}
qsort []     = []
qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++
               qsort (filter (>= x) xs)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@end verbatim

Here @code{mycode} is an identifier, @code{haskell} and
@code{numberLines} are classes, and @code{startFrom} is an attribute
with value @code{100}. Some output formats can use this information to
do syntax highlighting. Currently, the only output formats that uses
this information are HTML and LaTeX. If highlighting is supported for
your output format and language, then the code block above will appear
highlighted, with numbered lines. (To see which languages are supported,
do @code{pandoc --version}.) Otherwise, the code block above will appear
as follows:

@verbatim
<pre id="mycode" class="haskell numberLines" startFrom="100">
  <code>
  ...
  </code>
</pre>
@end verbatim

A shortcut form can also be used for specifying the language of the code
block:

@verbatim
```haskell
qsort [] = []
```
@end verbatim

This is equivalent to:

@verbatim
``` {.haskell}
qsort [] = []
```
@end verbatim

If the @code{fenced_code_attributes} extension is disabled, but input
contains class attribute(s) for the codeblock, the first class attribute
will be printed after the opening fence as a bare word.

To prevent all highlighting, use the @code{--no-highlight} flag. To set
the highlighting style, use @code{--highlight-style}. For more
information on highlighting, see @ref{#syntax-highlighting,Syntax
highlighting}, below.

@node Line blocks
@section Line blocks
@anchor{#line-blocks}

@node Extension line_blocks
@subsubsection Extension: @code{line_blocks}
@anchor{#extension-line_blocks}
A line block is a sequence of lines beginning with a vertical bar
(@code{|}) followed by a space. The division into lines will be
preserved in the output, as will any leading spaces; otherwise, the
lines will be formatted as Markdown. This is useful for verse and
addresses:

@verbatim
| The limerick packs laughs anatomical
| In space that is quite economical.
|    But the good ones I've seen
|    So seldom are clean
| And the clean ones so seldom are comical

| 200 Main St.
| Berkeley, CA 94718
@end verbatim

The lines can be hard-wrapped if needed, but the continuation line must
begin with a space.

@verbatim
| The Right Honorable Most Venerable and Righteous Samuel L.
  Constable, Jr.
| 200 Main St.
| Berkeley, CA 94718
@end verbatim

This syntax is borrowed from
@uref{http://docutils.sourceforge.net/docs/ref/rst/introduction.html,reStructuredText}.

@node Lists
@section Lists
@anchor{#lists}
@menu
* Bullet lists::
* The four-space rule::
* Ordered lists::
* Definition lists::
* Numbered example lists::
* Compact and loose lists::
* Ending a list::
@end menu

@node Bullet lists
@subsection Bullet lists
@anchor{#bullet-lists}
A bullet list is a list of bulleted list items. A bulleted list item
begins with a bullet (@code{*}, @code{+}, or @code{-}). Here is a simple
example:

@verbatim
* one
* two
* three
@end verbatim

This will produce a "compact" list. If you want a "loose" list, in which
each item is formatted as a paragraph, put spaces between the items:

@verbatim
* one

* two

* three
@end verbatim

The bullets need not be flush with the left margin; they may be indented
one, two, or three spaces. The bullet must be followed by whitespace.

List items look best if subsequent lines are flush with the first line
(after the bullet):

@verbatim
* here is my first
  list item.
* and my second.
@end verbatim

But Markdown also allows a "lazy" format:

@verbatim
* here is my first
list item.
* and my second.
@end verbatim

@node The four-space rule
@subsection The four-space rule
@anchor{#the-four-space-rule}
A list item may contain multiple paragraphs and other block-level
content. However, subsequent paragraphs must be preceded by a blank line
and indented four spaces or a tab. The list will look better if the
first paragraph is aligned with the rest:

@verbatim
  * First paragraph.

    Continued.

  * Second paragraph. With a code block, which must be indented
    eight spaces:

        { code }
@end verbatim

List items may include other lists. In this case the preceding blank
line is optional. The nested list must be indented four spaces or one
tab:

@verbatim
* fruits
    + apples
        - macintosh
        - red delicious
    + pears
    + peaches
* vegetables
    + broccoli
    + chard
@end verbatim

As noted above, Markdown allows you to write list items "lazily,"
instead of indenting continuation lines. However, if there are multiple
paragraphs or other blocks in a list item, the first line of each must
be indented.

@verbatim
+ A lazy, lazy, list
item.

+ Another one; this looks
bad but is legal.

    Second paragraph of second
list item.
@end verbatim

@strong{Note:} Although the four-space rule for continuation paragraphs
comes from the official
@uref{http://daringfireball.net/projects/markdown/syntax#list,Markdown
syntax guide}, the reference implementation, @code{Markdown.pl}, does
not follow it. So pandoc will give different results than
@code{Markdown.pl} when authors have indented continuation paragraphs
fewer than four spaces.

The
@uref{http://daringfireball.net/projects/markdown/syntax#list,Markdown
syntax guide} is not explicit whether the four-space rule applies to
@emph{all} block-level content in a list item; it only mentions
paragraphs and code blocks. But it implies that the rule applies to all
block-level content (including nested lists), and pandoc interprets it
that way.

@node Ordered lists
@subsection Ordered lists
@anchor{#ordered-lists}
Ordered lists work just like bulleted lists, except that the items begin
with enumerators rather than bullets.

In standard Markdown, enumerators are decimal numbers followed by a
period and a space. The numbers themselves are ignored, so there is no
difference between this list:

@verbatim
1.  one
2.  two
3.  three
@end verbatim

and this one:

@verbatim
5.  one
7.  two
1.  three
@end verbatim

@menu
* Extension fancy_lists::
* Extension startnum::
@end menu

@node Extension fancy_lists
@subsubsection Extension: @code{fancy_lists}
@anchor{#extension-fancy_lists}
Unlike standard Markdown, pandoc allows ordered list items to be marked
with uppercase and lowercase letters and roman numerals, in addition to
arabic numerals. List markers may be enclosed in parentheses or followed
by a single right-parentheses or period. They must be separated from the
text that follows by at least one space, and, if the list marker is a
capital letter with a period, by at least two spaces.@footnote{The point
of this rule is to ensure that normal paragraphs starting with people's
initials, like

@verbatim
B. Russell was an English philosopher.
@end verbatim

do not get treated as list items.

This rule will not prevent

@verbatim
(C) 2007 Joe Smith
@end verbatim

from being interpreted as a list item. In this case, a backslash escape
can be used:

@verbatim
(C\) 2007 Joe Smith
@end verbatim

}

The @code{fancy_lists} extension also allows '@code{#}' to be used as an
ordered list marker in place of a numeral:

@verbatim
#. one
#. two
@end verbatim

@node Extension startnum
@subsubsection Extension: @code{startnum}
@anchor{#extension-startnum}
Pandoc also pays attention to the type of list marker used, and to the
starting number, and both of these are preserved where possible in the
output format. Thus, the following yields a list with numbers followed
by a single parenthesis, starting with 9, and a sublist with lowercase
roman numerals:

@verbatim
 9)  Ninth
10)  Tenth
11)  Eleventh
       i. subone
      ii. subtwo
     iii. subthree
@end verbatim

Pandoc will start a new list each time a different type of list marker
is used. So, the following will create three lists:

@verbatim
(2) Two
(5) Three
1.  Four
*   Five
@end verbatim

If default list markers are desired, use @code{#.}:

@verbatim
#.  one
#.  two
#.  three
@end verbatim

@node Definition lists
@subsection Definition lists
@anchor{#definition-lists}
@menu
* Extension definition_lists::
@end menu

@node Extension definition_lists
@subsubsection Extension: @code{definition_lists}
@anchor{#extension-definition_lists}
Pandoc supports definition lists, using the syntax of
@uref{https://michelf.ca/projects/php-markdown/extra/,PHP Markdown
Extra} with some extensions.@footnote{I have been influenced by the
suggestions of
@uref{http://www.justatheory.com/computers/markup/modest-markdown-proposal.html,David
Wheeler}.}

@verbatim
Term 1

:   Definition 1

Term 2 with *inline markup*

:   Definition 2

        { some code, part of Definition 2 }

    Third paragraph of definition 2.
@end verbatim

Each term must fit on one line, which may optionally be followed by a
blank line, and must be followed by one or more definitions. A
definition begins with a colon or tilde, which may be indented one or
two spaces.

A term may have multiple definitions, and each definition may consist of
one or more block elements (paragraph, code block, list, etc.), each
indented four spaces or one tab stop. The body of the definition
(including the first line, aside from the colon or tilde) should be
indented four spaces. However, as with other Markdown lists, you can
"lazily" omit indentation except at the beginning of a paragraph or
other block element:

@verbatim
Term 1

:   Definition
with lazy continuation.

    Second paragraph of the definition.
@end verbatim

If you leave space before the definition (as in the example above), the
text of the definition will be treated as a paragraph. In some output
formats, this will mean greater spacing between term/definition pairs.
For a more compact definition list, omit the space before the
definition:

@verbatim
Term 1
  ~ Definition 1

Term 2
  ~ Definition 2a
  ~ Definition 2b
@end verbatim

Note that space between items in a definition list is required. (A
variant that loosens this requirement, but disallows "lazy" hard
wrapping, can be activated with @code{compact_definition_lists}: see
@ref{#non-pandoc-extensions,Non-pandoc extensions}, below.)

@node Numbered example lists
@subsection Numbered example lists
@anchor{#numbered-example-lists}
@menu
* Extension example_lists::
@end menu

@node Extension example_lists
@subsubsection Extension: @code{example_lists}
@anchor{#extension-example_lists}
The special list marker @code{@@} can be used for sequentially numbered
examples. The first list item with a @code{@@} marker will be numbered
'1', the next '2', and so on, throughout the document. The numbered
examples need not occur in a single list; each new list using @code{@@}
will take up where the last stopped. So, for example:

@verbatim
(@)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of examples.

(@)  My third example will be numbered (3).
@end verbatim

Numbered examples can be labeled and referred to elsewhere in the
document:

@verbatim
(@good)  This is a good example.

As (@good) illustrates, ...
@end verbatim

The label can be any string of alphanumeric characters, underscores, or
hyphens.

@node Compact and loose lists
@subsection Compact and loose lists
@anchor{#compact-and-loose-lists}
Pandoc behaves differently from @code{Markdown.pl} on some "edge cases"
involving lists. Consider this source:

@verbatim
+   First
+   Second:
    -   Fee
    -   Fie
    -   Foe

+   Third
@end verbatim

Pandoc transforms this into a "compact list" (with no @code{<p>} tags
around "First", "Second", or "Third"), while Markdown puts @code{<p>}
tags around "Second" and "Third" (but not "First"), because of the blank
space around "Third". Pandoc follows a simple rule: if the text is
followed by a blank line, it is treated as a paragraph. Since "Second"
is followed by a list, and not a blank line, it isn't treated as a
paragraph. The fact that the list is followed by a blank line is
irrelevant. (Note: Pandoc works this way even when the
@code{markdown_strict} format is specified. This behavior is consistent
with the official Markdown syntax description, even though it is
different from that of @code{Markdown.pl}.)

@node Ending a list
@subsection Ending a list
@anchor{#ending-a-list}
What if you want to put an indented code block after a list?

@verbatim
-   item one
-   item two

    { my code block }
@end verbatim

Trouble! Here pandoc (like other Markdown implementations) will treat
@code{@{ my code block @}} as the second paragraph of item two, and not
as a code block.

To "cut off" the list after item two, you can insert some non-indented
content, like an HTML comment, which won't produce visible output in any
format:

@verbatim
-   item one
-   item two

<!-- end of list -->

    { my code block }
@end verbatim

You can use the same trick if you want two consecutive lists instead of
one big list:

@verbatim
1.  one
2.  two
3.  three

<!-- -->

1.  uno
2.  dos
3.  tres
@end verbatim

@node Horizontal rules
@section Horizontal rules
@anchor{#horizontal-rules}
A line containing a row of three or more @code{*}, @code{-}, or @code{_}
characters (optionally separated by spaces) produces a horizontal rule:

@verbatim
*  *  *  *

---------------
@end verbatim

@node Tables
@section Tables
@anchor{#tables}
Four kinds of tables may be used. The first three kinds presuppose the
use of a fixed-width font, such as Courier. The fourth kind can be used
with proportionally spaced fonts, as it does not require lining up
columns.

@node Extension table_captions
@subsubsection Extension: @code{table_captions}
@anchor{#extension-table_captions}
A caption may optionally be provided with all 4 kinds of tables (as
illustrated in the examples below). A caption is a paragraph beginning
with the string @code{Table:} (or just @code{:}), which will be stripped
off. It may appear either before or after the table.

@node Extension simple_tables
@subsubsection Extension: @code{simple_tables}
@anchor{#extension-simple_tables}
Simple tables look like this:

@verbatim
  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table:  Demonstration of simple table syntax.
@end verbatim

The headers and table rows must each fit on one line. Column alignments
are determined by the position of the header text relative to the dashed
line below it:@footnote{This scheme is due to Michel Fortin, who
proposed it on the
@uref{http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html,Markdown
discussion list}.}

@itemize
@item
If the dashed line is flush with the header text on the right side but
extends beyond it on the left, the column is right-aligned.
@item
If the dashed line is flush with the header text on the left side but
extends beyond it on the right, the column is left-aligned.
@item
If the dashed line extends beyond the header text on both sides, the
column is centered.
@item
If the dashed line is flush with the header text on both sides, the
default alignment is used (in most cases, this will be left).
@end itemize

The table must end with a blank line, or a line of dashes followed by a
blank line.

The column headers may be omitted, provided a dashed line is used to end
the table. For example:

@verbatim
-------     ------ ----------   -------
     12     12        12             12
    123     123       123           123
      1     1          1              1
-------     ------ ----------   -------
@end verbatim

When headers are omitted, column alignments are determined on the basis
of the first line of the table body. So, in the tables above, the
columns would be right, left, center, and right aligned, respectively.

@node Extension multiline_tables
@subsubsection Extension: @code{multiline_tables}
@anchor{#extension-multiline_tables}
Multiline tables allow headers and table rows to span multiple lines of
text (but cells that span multiple columns or rows of the table are not
supported). Here is an example:

@verbatim
-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

Table: Here's the caption. It, too, may span
multiple lines.
@end verbatim

These work like simple tables, but with the following differences:

@itemize
@item
They must begin with a row of dashes, before the header text (unless the
headers are omitted).
@item
They must end with a row of dashes, then a blank line.
@item
The rows must be separated by blank lines.
@end itemize

In multiline tables, the table parser pays attention to the widths of
the columns, and the writers try to reproduce these relative widths in
the output. So, if you find that one of the columns is too narrow in the
output, try widening it in the Markdown source.

Headers may be omitted in multiline tables as well as simple tables:

@verbatim
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
----------- ------- --------------- -------------------------

: Here's a multiline table without headers.
@end verbatim

It is possible for a multiline table to have just one row, but the row
should be followed by a blank line (and then the row of dashes that ends
the table), or the table may be interpreted as a simple table.

@node Extension grid_tables
@subsubsection Extension: @code{grid_tables}
@anchor{#extension-grid_tables}
Grid tables look like this:

@verbatim
: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
@end verbatim

The row of @code{=}s separates the header from the table body, and can
be omitted for a headerless table. The cells of grid tables may contain
arbitrary block elements (multiple paragraphs, code blocks, lists,
etc.). Alignments are not supported, nor are cells that span multiple
columns or rows. Grid tables can be created easily using
@uref{http://table.sourceforge.net/,Emacs table mode}.

@node Extension pipe_tables
@subsubsection Extension: @code{pipe_tables}
@anchor{#extension-pipe_tables}
Pipe tables look like this:

@verbatim
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

  : Demonstration of pipe table syntax.
@end verbatim

The syntax is identical to
@uref{https://michelf.ca/projects/php-markdown/extra/#table,PHP Markdown
Extra tables}. The beginning and ending pipe characters are optional,
but pipes are required between all columns. The colons indicate column
alignment as shown. The header cannot be omitted. To simulate a
headerless table, include a header with blank cells.

Since the pipes indicate column boundaries, columns need not be
vertically aligned, as they are in the above example. So, this is a
perfectly legal (though ugly) pipe table:

@verbatim
fruit| price
-----|-----:
apple|2.05
pear|1.37
orange|3.09
@end verbatim

The cells of pipe tables cannot contain block elements like paragraphs
and lists, and cannot span multiple lines. If a pipe table contains a
row whose printable content is wider than the column width (see
@code{--columns}), then the cell contents will wrap, with the relative
cell widths determined by the widths of the separator lines.

Note: pandoc also recognizes pipe tables of the following form, as can
be produced by Emacs' orgtbl-mode:

@verbatim
| One | Two   |
|-----+-------|
| my  | table |
| is  | nice  |
@end verbatim

The difference is that @code{+} is used instead of @code{|}. Other
orgtbl features are not supported. In particular, to get non-default
column alignment, you'll need to add colons as above.

@node Metadata blocks
@section Metadata blocks
@anchor{#metadata-blocks}

@node Extension pandoc_title_block
@subsubsection Extension: @code{pandoc_title_block}
@anchor{#extension-pandoc_title_block}
If the file begins with a title block

@verbatim
% title
% author(s) (separated by semicolons)
% date
@end verbatim

it will be parsed as bibliographic information, not regular text. (It
will be used, for example, in the title of standalone LaTeX or HTML
output.) The block may contain just a title, a title and an author, or
all three elements. If you want to include an author but no title, or a
title and a date but no author, you need a blank line:

@verbatim
%
% Author

% My title
%
% June 15, 2006
@end verbatim

The title may occupy multiple lines, but continuation lines must begin
with leading space, thus:

@verbatim
% My title
  on multiple lines
@end verbatim

If a document has multiple authors, the authors may be put on separate
lines with leading space, or separated by semicolons, or both. So, all
of the following are equivalent:

@verbatim
% Author One
  Author Two

% Author One; Author Two

% Author One;
  Author Two
@end verbatim

The date must fit on one line.

All three metadata fields may contain standard inline formatting
(italics, links, footnotes, etc.).

Title blocks will always be parsed, but they will affect the output only
when the @code{--standalone} (@code{-s}) option is chosen. In HTML
output, titles will appear twice: once in the document head -- this is
the title that will appear at the top of the window in a browser -- and
once at the beginning of the document body. The title in the document
head can have an optional prefix attached (@code{--title-prefix} or
@code{-T} option). The title in the body appears as an H1 element with
class "title", so it can be suppressed or reformatted with CSS. If a
title prefix is specified with @code{-T} and no title block appears in
the document, the title prefix will be used by itself as the HTML title.

The man page writer extracts a title, man page section number, and other
header and footer information from the title line. The title is assumed
to be the first word on the title line, which may optionally end with a
(single-digit) section number in parentheses. (There should be no space
between the title and the parentheses.) Anything after this is assumed
to be additional footer and header text. A single pipe character
(@code{|}) should be used to separate the footer text from the header
text. Thus,

@verbatim
% PANDOC(1)
@end verbatim

will yield a man page with the title @code{PANDOC} and section 1.

@verbatim
% PANDOC(1) Pandoc User Manuals
@end verbatim

will also have "Pandoc User Manuals" in the footer.

@verbatim
% PANDOC(1) Pandoc User Manuals | Version 4.0
@end verbatim

will also have "Version 4.0" in the header.

@node Extension yaml_metadata_block
@subsubsection Extension: @code{yaml_metadata_block}
@anchor{#extension-yaml_metadata_block}
A YAML metadata block is a valid YAML object, delimited by a line of
three hyphens (@code{---}) at the top and a line of three hyphens
(@code{---}) or three dots (@code{...}) at the bottom. A YAML metadata
block may occur anywhere in the document, but if it is not at the
beginning, it must be preceded by a blank line. (Note that, because of
the way pandoc concatenates input files when several are provided, you
may also keep the metadata in a separate YAML file and pass it to pandoc
as an argument, along with your Markdown files:

@verbatim
pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html
@end verbatim

Just be sure that the YAML file begins with @code{---} and ends with
@code{---} or @code{...}.)

Metadata will be taken from the fields of the YAML object and added to
any existing document metadata. Metadata can contain lists and objects
(nested arbitrarily), but all string scalars will be interpreted as
Markdown. Fields with names ending in an underscore will be ignored by
pandoc. (They may be given a role by external processors.)

A document may contain multiple metadata blocks. The metadata fields
will be combined through a @emph{left-biased union}: if two metadata
blocks attempt to set the same field, the value from the first block
will be taken.

When pandoc is used with @code{-t markdown} to create a Markdown
document, a YAML metadata block will be produced only if the
@code{-s/--standalone} option is used. All of the metadata will appear
in a single block at the beginning of the document.

Note that YAML escaping rules must be followed. Thus, for example, if a
title contains a colon, it must be quoted. The pipe character (@code{|})
can be used to begin an indented block that will be interpreted
literally, without need for escaping. This form is necessary when the
field contains blank lines:

@verbatim
---
title:  'This is the title: it contains a colon'
author:
- name: Author One
  affiliation: University of Somewhere
- name: Author Two
  affiliation: University of Nowhere
tags: [nothing, nothingness]
abstract: |
  This is the abstract.

  It consists of two paragraphs.
...
@end verbatim

Template variables will be set automatically from the metadata. Thus,
for example, in writing HTML, the variable @code{abstract} will be set
to the HTML equivalent of the Markdown in the @code{abstract} field:

@verbatim
<p>This is the abstract.</p>
<p>It consists of two paragraphs.</p>
@end verbatim

Note: The @code{author} variable in the default templates expects a
simple list or string. To use the structured authors in the example, you
would need a custom template. For example:

@verbatim
$for(author)$
$if(author.name)$
$author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$
$else$
$author$
$endif$
$endfor$
@end verbatim

@node Backslash escapes
@section Backslash escapes
@anchor{#backslash-escapes}

@node Extension all_symbols_escapable
@subsubsection Extension: @code{all_symbols_escapable}
@anchor{#extension-all_symbols_escapable}
Except inside a code block or inline code, any punctuation or space
character preceded by a backslash will be treated literally, even if it
would normally indicate formatting. Thus, for example, if one writes

@verbatim
*\*hello\**
@end verbatim

one will get

@verbatim
<em>*hello*</em>
@end verbatim

instead of

@verbatim
<strong>hello</strong>
@end verbatim

This rule is easier to remember than standard Markdown's rule, which
allows only the following characters to be backslash-escaped:

@verbatim
\`*_{}[]()>#+-.!
@end verbatim

(However, if the @code{markdown_strict} format is used, the standard
Markdown rule will be used.)

A backslash-escaped space is parsed as a nonbreaking space. It will
appear in TeX output as @code{~} and in HTML and XML as @code{\&#160;}
or @code{\&nbsp;}.

A backslash-escaped newline (i.e. a backslash occurring at the end of a
line) is parsed as a hard line break. It will appear in TeX output as
@code{\\} and in HTML as @code{<br />}. This is a nice alternative to
Markdown's "invisible" way of indicating hard line breaks using two
trailing spaces on a line.

Backslash escapes do not work in verbatim contexts.

@node Smart punctuation
@section Smart punctuation
@anchor{#smart-punctuation}

@node Extension
@subsubsection Extension
@anchor{#extension}
If the @code{--smart} option is specified, pandoc will produce
typographically correct output, converting straight quotes to curly
quotes, @code{---} to em-dashes, @code{--} to en-dashes, and @code{...}
to ellipses. Nonbreaking spaces are inserted after certain
abbreviations, such as "Mr."

Note: if your LaTeX template or any included header file call for the
@uref{https://ctan.org/pkg/csquotes,@code{csquotes}} package, pandoc
will detect this automatically and use @code{\enquote@{...@}} for quoted
text.

@node Inline formatting
@section Inline formatting
@anchor{#inline-formatting}
@menu
* Emphasis::
* Strikeout::
* Superscripts and subscripts::
* Verbatim::
* Small caps::
@end menu

@node Emphasis
@subsection Emphasis
@anchor{#emphasis}
To @emph{emphasize} some text, surround it with @code{*}s or @code{_},
like this:

@verbatim
This text is _emphasized with underscores_, and this
is *emphasized with asterisks*.
@end verbatim

Double @code{*} or @code{_} produces @strong{strong emphasis}:

@verbatim
This is **strong emphasis** and __with underscores__.
@end verbatim

A @code{*} or @code{_} character surrounded by spaces, or
backslash-escaped, will not trigger emphasis:

@verbatim
This is * not emphasized *, and \*neither is this\*.
@end verbatim

@menu
* Extension intraword_underscores::
@end menu

@node Extension intraword_underscores
@subsubsection Extension: @code{intraword_underscores}
@anchor{#extension-intraword_underscores}
Because @code{_} is sometimes used inside words and identifiers, pandoc
does not interpret a @code{_} surrounded by alphanumeric characters as
an emphasis marker. If you want to emphasize just part of a word, use
@code{*}:

@verbatim
feas*ible*, not feas*able*.
@end verbatim

@node Strikeout
@subsection Strikeout
@anchor{#strikeout}
@menu
* Extension strikeout::
@end menu

@node Extension strikeout
@subsubsection Extension: @code{strikeout}
@anchor{#extension-strikeout}
To strikeout a section of text with a horizontal line, begin and end it
with @code{~~}. Thus, for example,

@verbatim
This ~~is deleted text.~~
@end verbatim

@node Superscripts and subscripts
@subsection Superscripts and subscripts
@anchor{#superscripts-and-subscripts}
@menu
* Extension superscript subscript::
@end menu

@node Extension superscript subscript
@subsubsection Extension: @code{superscript}, @code{subscript}
@anchor{#extension-superscript-subscript}
Superscripts may be written by surrounding the superscripted text by
@code{^} characters; subscripts may be written by surrounding the
subscripted text by @code{~} characters. Thus, for example,

@verbatim
H~2~O is a liquid.  2^10^ is 1024.
@end verbatim

If the superscripted or subscripted text contains spaces, these spaces
must be escaped with backslashes. (This is to prevent accidental
superscripting and subscripting through the ordinary use of @code{~} and
@code{^}.) Thus, if you want the letter P with 'a cat' in subscripts,
use @code{P~a\ cat~}, not @code{P~a cat~}.

@node Verbatim
@subsection Verbatim
@anchor{#verbatim}
To make a short span of text verbatim, put it inside backticks:

@verbatim
What is the difference between `>>=` and `>>`?
@end verbatim

If the verbatim text includes a backtick, use double backticks:

@verbatim
Here is a literal backtick `` ` ``.
@end verbatim

(The spaces after the opening backticks and before the closing backticks
will be ignored.)

The general rule is that a verbatim span starts with a string of
consecutive backticks (optionally followed by a space) and ends with a
string of the same number of backticks (optionally preceded by a space).

Note that backslash-escapes (and other Markdown constructs) do not work
in verbatim contexts:

@verbatim
This is a backslash followed by an asterisk: `\*`.
@end verbatim

@menu
* Extension inline_code_attributes::
@end menu

@node Extension inline_code_attributes
@subsubsection Extension: @code{inline_code_attributes}
@anchor{#extension-inline_code_attributes}
Attributes can be attached to verbatim text, just as with
@ref{#fenced-code-blocks,fenced code blocks}:

@verbatim
`<$>`{.haskell}
@end verbatim

@node Small caps
@subsection Small caps
@anchor{#small-caps}
To write small caps, you can use an HTML span tag:

@verbatim
<span style="font-variant:small-caps;">Small caps</span>
@end verbatim

(The semicolon is optional and there may be space after the colon.) This
will work in all output formats that support small caps.

@node Math
@section Math
@anchor{#math}

@node Extension tex_math_dollars
@subsubsection Extension: @code{tex_math_dollars}
@anchor{#extension-tex_math_dollars}
Anything between two @code{$} characters will be treated as TeX math.
The opening @code{$} must have a non-space character immediately to its
right, while the closing @code{$} must have a non-space character
immediately to its left, and must not be followed immediately by a
digit. Thus, @code{$20,000 and $30,000} won't parse as math. If for some
reason you need to enclose text in literal @code{$} characters,
backslash-escape them and they won't be treated as math delimiters.

TeX math will be printed in all output formats. How it is rendered
depends on the output format:

@table @asis
@item Markdown, LaTeX, Emacs Org mode, ConTeXt

It will appear verbatim between @code{$} characters.
@item reStructuredText

It will be rendered using an
@uref{http://docutils.sourceforge.net/docs/ref/rst/roles.html#math,interpreted
text role @code{:math:}}.
@item AsciiDoc

It will be rendered as @code{latexmath:[...]}.
@item Texinfo

It will be rendered inside a @code{@@math} command.
@item groff man

It will be rendered verbatim without @code{$}'s.
@item MediaWiki, DokuWiki

It will be rendered inside @code{<math>} tags.
@item Textile

It will be rendered inside @code{<span class="math">} tags.
@item RTF, OpenDocument, ODT

It will be rendered, if possible, using unicode characters, and will
otherwise appear verbatim.
@item DocBook

If the @code{--mathml} flag is used, it will be rendered using MathML in
an @code{inlineequation} or @code{informalequation} tag. Otherwise it
will be rendered, if possible, using unicode characters.
@item Docx

It will be rendered using OMML math markup.
@item FictionBook2

If the @code{--webtex} option is used, formulas are rendered as images
using Google Charts or other compatible web service, downloaded and
embedded in the e-book. Otherwise, they will appear verbatim.
@item HTML, Slidy, DZSlides, S5, EPUB

The way math is rendered in HTML will depend on the command-line options
selected:

@enumerate 
@item
The default is to render TeX math as far as possible using unicode
characters, as with RTF, DocBook, and OpenDocument output. Formulas are
put inside a @code{span} with @code{class="math"}, so that they may be
styled differently from the surrounding text if needed.

@item
If the @code{--latexmathml} option is used, TeX math will be displayed
between @code{$} or @code{$$} characters and put in @code{<span>} tags
with class @code{LaTeX}. The
@uref{http://math.etsu.edu/LaTeXMathML/,LaTeXMathML} script will be used
to render it as formulas. (This trick does not work in all browsers, but
it works in Firefox. In browsers that do not support LaTeXMathML, TeX
math will appear verbatim between @code{$} characters.)

@item
If the @code{--jsmath} option is used, TeX math will be put inside
@code{<span>} tags (for inline math) or @code{<div>} tags (for display
math) with class @code{math}. The
@uref{http://www.math.union.edu/~dpvc/jsmath/,jsMath} script will be
used to render it.

@item
If the @code{--mimetex} option is used, the
@uref{http://www.forkosh.com/mimetex.html,mimeTeX} CGI script will be
called to generate images for each TeX formula. This should work in all
browsers. The @code{--mimetex} option takes an optional URL as argument.
If no URL is specified, it will be assumed that the mimeTeX CGI script
is at @code{/cgi-bin/mimetex.cgi}.

@item
If the @code{--gladtex} option is used, TeX formulas will be enclosed in
@code{<eq>} tags in the HTML output. The resulting @code{htex} file may
then be processed by @uref{http://ans.hsh.no/home/mgg/gladtex/,gladTeX},
which will produce image files for each formula and an HTML file with
links to these images. So, the procedure is:

@verbatim
pandoc -s --gladtex myfile.txt -o myfile.htex
gladtex -d myfile-images myfile.htex
# produces myfile.html and images in myfile-images
@end verbatim

@item
If the @code{--webtex} option is used, TeX formulas will be converted to
@code{<img>} tags that link to an external script that converts formulas
to images. The formula will be URL-encoded and concatenated with the URL
provided. If no URL is specified, the Google Chart API will be used
(@code{http://chart.apis.google.com/chart?cht=tx&chl=}).

@item
If the @code{--mathjax} option is used, TeX math will be displayed
between @code{\(...\)} (for inline math) or @code{\[...\]} (for display
math) and put in @code{<span>} tags with class @code{math}. The
@uref{https://www.mathjax.org,MathJax} script will be used to render it
as formulas.

@end enumerate

@end table

@node Raw HTML
@section Raw HTML
@anchor{#raw-html}

@node Extension raw_html
@subsubsection Extension: @code{raw_html}
@anchor{#extension-raw_html}
Markdown allows you to insert raw HTML (or DocBook) anywhere in a
document (except verbatim contexts, where @code{<}, @code{>}, and
@code{&} are interpreted literally). (Technically this is not an
extension, since standard Markdown allows it, but it has been made an
extension so that it can be disabled if desired.)

The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous,
DZSlides, EPUB, Markdown, and Textile output, and suppressed in other
formats.

@node Extension markdown_in_html_blocks
@subsubsection Extension: @code{markdown_in_html_blocks}
@anchor{#extension-markdown_in_html_blocks}
Standard Markdown allows you to include HTML "blocks": blocks of HTML
between balanced tags that are separated from the surrounding text with
blank lines, and start and end at the left margin. Within these blocks,
everything is interpreted as HTML, not Markdown; so (for example),
@code{*} does not signify emphasis.

Pandoc behaves this way when the @code{markdown_strict} format is used;
but by default, pandoc interprets material between HTML block tags as
Markdown. Thus, for example, pandoc will turn

@verbatim
<table>
<tr>
<td>*one*</td>
<td>[a link](http://google.com)</td>
</tr>
</table>
@end verbatim

into

@verbatim
<table>
<tr>
<td><em>one</em></td>
<td><a href="http://google.com">a link</a></td>
</tr>
</table>
@end verbatim

whereas @code{Markdown.pl} will preserve it as is.

There is one exception to this rule: text between @code{<script>} and
@code{<style>} tags is not interpreted as Markdown.

This departure from standard Markdown should make it easier to mix
Markdown with HTML block elements. For example, one can surround a block
of Markdown text with @code{<div>} tags without preventing it from being
interpreted as Markdown.

@node Extension native_divs
@subsubsection Extension: @code{native_divs}
@anchor{#extension-native_divs}
Use native pandoc @code{Div} blocks for content inside @code{<div>}
tags. For the most part this should give the same output as
@code{markdown_in_html_blocks}, but it makes it easier to write pandoc
filters to manipulate groups of blocks.

@node Extension native_spans
@subsubsection Extension: @code{native_spans}
@anchor{#extension-native_spans}
Use native pandoc @code{Span} blocks for content inside @code{<span>}
tags. For the most part this should give the same output as
@code{raw_html}, but it makes it easier to write pandoc filters to
manipulate groups of inlines.

@node Raw TeX
@section Raw TeX
@anchor{#raw-tex}

@node Extension raw_tex
@subsubsection Extension: @code{raw_tex}
@anchor{#extension-raw_tex}
In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be
included in a document. Inline TeX commands will be preserved and passed
unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can
use LaTeX to include BibTeX citations:

@verbatim
This result was proved in \cite{jones.1967}.
@end verbatim

Note that in LaTeX environments, like

@verbatim
\begin{tabular}{|l|l|}\hline
Age & Frequency \\ \hline
18--25  & 15 \\
26--35  & 33 \\
36--45  & 22 \\ \hline
\end{tabular}
@end verbatim

the material between the begin and end tags will be interpreted as raw
LaTeX, not as Markdown.

Inline LaTeX is ignored in output formats other than Markdown, LaTeX,
and ConTeXt.

@node LaTeX macros
@section LaTeX macros
@anchor{#latex-macros}

@node Extension latex_macros
@subsubsection Extension: @code{latex_macros}
@anchor{#extension-latex_macros}
For output formats other than LaTeX, pandoc will parse LaTeX
@code{\newcommand} and @code{\renewcommand} definitions and apply the
resulting macros to all LaTeX math. So, for example, the following will
work in all output formats, not just LaTeX:

@verbatim
\newcommand{\tuple}[1]{\langle #1 \rangle}

$\tuple{a, b, c}$
@end verbatim

In LaTeX output, the @code{\newcommand} definition will simply be passed
unchanged to the output.

@node Links
@section Links
@anchor{#links}
Markdown allows links to be specified in several ways.
@menu
* Automatic links::
* Inline links::
* Reference links::
* Internal links::
@end menu

@node Automatic links
@subsection Automatic links
@anchor{#automatic-links}
If you enclose a URL or email address in pointy brackets, it will become
a link:

@verbatim
<http://google.com>
<sam@green.eggs.ham>
@end verbatim

@node Inline links
@subsection Inline links
@anchor{#inline-links}
An inline link consists of the link text in square brackets, followed by
the URL in parentheses. (Optionally, the URL can be followed by a link
title, in quotes.)

@verbatim
This is an [inline link](/url), and here's [one with
a title](http://fsf.org "click here for a good time!").
@end verbatim

There can be no space between the bracketed part and the parenthesized
part. The link text can contain formatting (such as emphasis), but the
title cannot.

Email addresses in inline links are not autodetected, so they have to be
prefixed with @code{mailto}:

@verbatim
[Write me!](mailto:sam@green.eggs.ham)
@end verbatim

@node Reference links
@subsection Reference links
@anchor{#reference-links}
An @emph{explicit} reference link has two parts, the link itself and the
link definition, which may occur elsewhere in the document (either
before or after the link).

The link consists of link text in square brackets, followed by a label
in square brackets. (There can be space between the two.) The link
definition consists of the bracketed label, followed by a colon and a
space, followed by the URL, and optionally (after a space) a link title
either in quotes or in parentheses. The label must not be parseable as a
citation (assuming the @code{citations} extension is enabled): citations
take precedence over link labels.

Here are some examples:

@verbatim
[my label 1]: /foo/bar.html  "My title, optional"
[my label 2]: /foo
[my label 3]: http://fsf.org (The free software foundation)
[my label 4]: /bar#special  'A title in single quotes'
@end verbatim

The URL may optionally be surrounded by angle brackets:

@verbatim
[my label 5]: <http://foo.bar.baz>
@end verbatim

The title may go on the next line:

@verbatim
[my label 3]: http://fsf.org
  "The free software foundation"
@end verbatim

Note that link labels are not case sensitive. So, this will work:

@verbatim
Here is [my link][FOO]

[Foo]: /bar/baz
@end verbatim

In an @emph{implicit} reference link, the second pair of brackets is
empty:

@verbatim
See [my website][].

[my website]: http://foo.bar.baz
@end verbatim

Note: In @code{Markdown.pl} and most other Markdown implementations,
reference link definitions cannot occur in nested constructions such as
list items or block quotes. Pandoc lifts this arbitrary seeming
restriction. So the following is fine in pandoc, though not in most
other implementations:

@verbatim
> My block [quote].
>
> [quote]: /foo
@end verbatim

@menu
* Extension shortcut_reference_links::
@end menu

@node Extension shortcut_reference_links
@subsubsection Extension: @code{shortcut_reference_links}
@anchor{#extension-shortcut_reference_links}
In a @emph{shortcut} reference link, the second pair of brackets may be
omitted entirely:

@verbatim
See [my website].

[my website]: http://foo.bar.baz
@end verbatim

@node Internal links
@subsection Internal links
@anchor{#internal-links}
To link to another section of the same document, use the automatically
generated identifier (see @ref{#header-identifiers,Header identifiers}).
For example:

@verbatim
See the [Introduction](#introduction).
@end verbatim

or

@verbatim
See the [Introduction].

[Introduction]: #introduction
@end verbatim

Internal links are currently supported for HTML formats (including HTML
slide shows and EPUB), LaTeX, and ConTeXt.

@node Images
@section Images
@anchor{#images}
A link immediately preceded by a @code{!} will be treated as an image.
The link text will be used as the image's alt text:

@verbatim
![la lune](lalune.jpg "Voyage to the moon")

![movie reel]

[movie reel]: movie.gif
@end verbatim

@node Extension implicit_figures
@subsubsection Extension: @code{implicit_figures}
@anchor{#extension-implicit_figures}
An image occurring by itself in a paragraph will be rendered as a figure
with a caption.@footnote{This feature is not yet implemented for RTF,
OpenDocument, or ODT. In those formats, you'll just get an image in a
paragraph by itself, with no caption.} (In LaTeX, a figure environment
will be used; in HTML, the image will be placed in a @code{div} with
class @code{figure}, together with a caption in a @code{p} with class
@code{caption}.) The image's alt text will be used as the caption.

@verbatim
![This is the caption](/url/of/image.png)
@end verbatim

If you just want a regular inline image, just make sure it is not the
only thing in the paragraph. One way to do this is to insert a
nonbreaking space after the image:

@verbatim
![This image won't be a figure](/url/of/image.png)\ 
@end verbatim

@node Extension link_attributes
@subsubsection Extension: @code{link_attributes}
@anchor{#extension-link_attributes}
Attributes can be set on links and images:

@verbatim
An inline ![image](foo.jpg){#id .class width=30 height=20px}
and a reference ![image][ref] with attributes.

[ref]: foo.jpg "optional title" {#id .class key=val key2="val 2"}
@end verbatim

(This syntax is compatible with
@uref{https://michelf.ca/projects/php-markdown/extra/,PHP Markdown
Extra} when only @code{#id} and @code{.class} are used.)

For HTML and EPUB, all attributes except @code{width} and @code{height}
(but including @code{srcset} and @code{sizes}) are passed through as is.
The other writers ignore attributes that are not supported by their
output format.

The @code{width} and @code{height} attributes on images are treated
specially. When used without a unit, the unit is assumed to be pixels.
However, any of the following unit identifiers can be used: @code{px},
@code{cm}, @code{mm}, @code{in}, @code{inch} and @code{%}. There must
not be any spaces between the number and the unit. For example:

@verbatim
![](file.jpg){ width=50% }
@end verbatim

@itemize
@item
Dimensions are converted to inches for output in page-based formats like
LaTeX. Dimensions are converted to pixels for output in HTML-like
formats. Use the @code{--dpi} option to specify the number of pixels per
inch. The default is 96dpi.
@item
The @code{%} unit is generally relative to some available space. For
example the above example will render to
@code{<img href="file.jpg" style="width: 50%;" />} (HTML),
@code{\includegraphics[width=0.5\textwidth]@{file.jpg@}} (LaTeX), or
@code{\externalfigure[file.jpg][width=0.5\textwidth]} (ConTeXt).
@item
Some output formats have a notion of a class
(@uref{http://wiki.contextgarden.net/Using_Graphics#Multiple_Image_Settings,ConTeXt})
or a unique identifier (LaTeX @code{\caption}), or both (HTML).
@item
When no @code{width} or @code{height} attributes are specified, the
fallback is to look at the image resolution and the dpi metadata
embedded in the image file.
@end itemize

@node Footnotes
@section Footnotes
@anchor{#footnotes}

@node Extension footnotes
@subsubsection Extension: @code{footnotes}
@anchor{#extension-footnotes}
Pandoc's Markdown allows footnotes, using the following syntax:

@verbatim
Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it
isn't indented.
@end verbatim

The identifiers in footnote references may not contain spaces, tabs, or
newlines. These identifiers are used only to correlate the footnote
reference with the note itself; in the output, footnotes will be
numbered sequentially.

The footnotes themselves need not be placed at the end of the document.
They may appear anywhere except inside other block elements (lists,
block quotes, tables, etc.).

@node Extension inline_notes
@subsubsection Extension: @code{inline_notes}
@anchor{#extension-inline_notes}
Inline footnotes are also allowed (though, unlike regular notes, they
cannot contain multiple paragraphs). The syntax is as follows:

@verbatim
Here is an inline note.^[Inlines notes are easier to write, since
you don't have to pick an identifier and move down to type the
note.]
@end verbatim

Inline and regular footnotes may be mixed freely.

@node Citations
@section Citations
@anchor{#citations}

@node Extension citations
@subsubsection Extension: @code{citations}
@anchor{#extension-citations}
Using an external filter, @code{pandoc-citeproc}, pandoc can
automatically generate citations and a bibliography in a number of
styles. Basic usage is

@verbatim
pandoc --filter pandoc-citeproc myinput.txt
@end verbatim

In order to use this feature, you will need to specify a bibliography
file using the @code{bibliography} metadata field in a YAML metadata
section, or @code{--bibliography} command line argument. You can supply
multiple @code{--bibliography} arguments or set @code{bibliography}
metadata field to YAML array, if you want to use multiple bibliography
files. The bibliography may have any of these formats:

@multitable {EndNote XML} {File extension} 
@headitem 
Format
 @tab File extension
@item 
BibLaTeX
 @tab .bib
@item 
BibTeX
 @tab .bibtex
@item 
Copac
 @tab .copac
@item 
CSL JSON
 @tab .json
@item 
CSL YAML
 @tab .yaml
@item 
EndNote
 @tab .enl
@item 
EndNote XML
 @tab .xml
@item 
ISI
 @tab .wos
@item 
MEDLINE
 @tab .medline
@item 
MODS
 @tab .mods
@item 
RIS
 @tab .ris
@end multitable

Note that @code{.bib} can be used with both BibTeX and BibLaTeX files;
use @code{.bibtex} to force BibTeX.

Note that @code{pandoc-citeproc --bib2json} and
@code{pandoc-citeproc --bib2yaml} can produce @code{.json} and
@code{.yaml} files from any of the supported formats.

In-field markup: In BibTeX and BibLaTeX databases, pandoc-citeproc
parses a subset of LaTeX markup; in CSL YAML databases, pandoc Markdown;
and in CSL JSON databases, an
@uref{http://docs.citationstyles.org/en/1.0/release-notes.html#rich-text-markup-within-fields,HTML-like
markup}:

@table @asis
@item @code{<i>...</i>}

italics
@item @code{<b>...</b>}

bold
@item @code{<span style="font-variant:small-caps;">...</span>} or
@code{<sc>...</sc>}

small capitals
@item @code{<sub>...</sub>}

subscript
@item @code{<sup>...</sup>}

superscript
@item @code{<span class="nocase">...</span>}

prevent a phrase from being capitalized as title case
@end table

@code{pandoc-citeproc -j} and @code{-y} interconvert the CSL JSON and
CSL YAML formats as far as possible.

As an alternative to specifying a bibliography file using
@code{--bibliography} or the YAML metadata field @code{bibliography},
you can include the citation data directly in the @code{references}
field of the document's YAML metadata. The field should contain an array
of YAML-encoded references, for example:

@verbatim
---
references:
- type: article-journal
  id: WatsonCrick1953
  author:
  - family: Watson
    given: J. D.
  - family: Crick
    given: F. H. C.
  issued:
    date-parts:
    - - 1953
      - 4
      - 25
  title: 'Molecular structure of nucleic acids: a structure for deoxyribose
    nucleic acid'
  title-short: Molecular structure of nucleic acids
  container-title: Nature
  volume: 171
  issue: 4356
  page: 737-738
  DOI: 10.1038/171737a0
  URL: http://www.nature.com/nature/journal/v171/n4356/abs/171737a0.html
  language: en-GB
...
@end verbatim

(@code{pandoc-citeproc --bib2yaml} can produce these from a bibliography
file in one of the supported formats.)

Citations and references can be formatted using any style supported by
the @uref{http://citationstyles.org,Citation Style Language}, listed in
the @uref{https://www.zotero.org/styles,Zotero Style Repository}. These
files are specified using the @code{--csl} option or the @code{csl}
metadata field. By default, @code{pandoc-citeproc} will use the
@uref{http://chicagomanualofstyle.org,Chicago Manual of Style}
author-date format. The CSL project provides further information on
@uref{http://citationstyles.org/styles/,finding and editing styles}.

To make your citations hyperlinks to the corresponding bibliography
entries, add @code{link-citations: true} to your YAML metadata.

Citations go inside square brackets and are separated by semicolons.
Each citation must have a key, composed of '@@' + the citation
identifier from the database, and may optionally have a prefix, a
locator, and a suffix. The citation key must begin with a letter, digit,
or @code{_}, and may contain alphanumerics, @code{_}, and internal
punctuation characters (@code{:.#$%&-+?<>~/}). Here are some examples:

@verbatim
Blah blah [see @doe99, pp. 33-35; also @smith04, chap. 1].

Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].

Blah blah [@smith04; @doe99].
@end verbatim

@code{pandoc-citeproc} detects locator terms in the
@uref{https://github.com/citation-style-language/locales,CSL locale
files}. Either abbreviated or unabbreviated forms are accepted. In the
@code{en-US} locale, locator terms can be written in either singular or
plural forms, as @code{book}, @code{bk.}/@code{bks.}; @code{chapter},
@code{chap.}/@code{chaps.}; @code{column}, @code{col.}/@code{cols.};
@code{figure}, @code{fig.}/@code{figs.}; @code{folio},
@code{fol.}/@code{fols.}; @code{number}, @code{no.}/@code{nos.};
@code{line}, @code{l.}/@code{ll.}; @code{note}, @code{n.}/@code{nn.};
@code{opus}, @code{op.}/@code{opp.}; @code{page}, @code{p.}/@code{pp.};
@code{paragraph}, @code{para.}/@code{paras.}; @code{part},
@code{pt.}/@code{pts.}; @code{section}, @code{sec.}/@code{secs.};
@code{sub verbo}, @code{s.v.}/@code{s.vv.}; @code{verse},
@code{v.}/@code{vv.}; @code{volume}, @code{vol.}/@code{vols.};
@code{¶}/@code{¶¶}; @code{§}/@code{§§}. If no locator term is used,
"page" is assumed.

A minus sign (@code{-}) before the @code{@@} will suppress mention of
the author in the citation. This can be useful when the author is
already mentioned in the text:

@verbatim
Smith says blah [-@smith04].
@end verbatim

You can also write an in-text citation, as follows:

@verbatim
@smith04 says blah.

@smith04 [p. 33] says blah.
@end verbatim

If the style calls for a list of works cited, it will be placed at the
end of the document. Normally, you will want to end your document with
an appropriate header:

@verbatim
last paragraph...

# References
@end verbatim

The bibliography will be inserted after this header. Note that the
@code{unnumbered} class will be added to this header, so that the
section will not be numbered.

If you want to include items in the bibliography without actually citing
them in the body text, you can define a dummy @code{nocite} metadata
field and put the citations there:

@verbatim
---
nocite: |
  @item1, @item2
...

@item3
@end verbatim

In this example, the document will contain a citation for @code{item3}
only, but the bibliography will contain entries for @code{item1},
@code{item2}, and @code{item3}.

For LaTeX or PDF output, you can also use
@uref{https://ctan.org/pkg/natbib,@code{natbib}} or
@uref{https://ctan.org/pkg/biblatex,@code{biblatex}} to render
bibliography. In order to do so, specify bibliography files as outlined
above, and add @code{--natbib} or @code{--biblatex} argument to
@code{pandoc} invocation. Bear in mind that bibliography files have to
be in respective format (either BibTeX or BibLaTeX).

For more information, see the
@uref{https://github.com/jgm/pandoc-citeproc/blob/master/man/pandoc-citeproc.1.md,pandoc-citeproc
man page}.

@node Non-pandoc extensions
@section Non-pandoc extensions
@anchor{#non-pandoc-extensions}
The following Markdown syntax extensions are not enabled by default in
pandoc, but may be enabled by adding @code{+EXTENSION} to the format
name, where @code{EXTENSION} is the name of the extension. Thus, for
example, @code{markdown+hard_line_breaks} is Markdown with hard line
breaks.

@node Extension lists_without_preceding_blankline
@subsubsection Extension: @code{lists_without_preceding_blankline}
@anchor{#extension-lists_without_preceding_blankline}
Allow a list to occur right after a paragraph, with no intervening blank
space.

@node Extension hard_line_breaks
@subsubsection Extension: @code{hard_line_breaks}
@anchor{#extension-hard_line_breaks}
Causes all newlines within a paragraph to be interpreted as hard line
breaks instead of spaces.

@node Extension ignore_line_breaks
@subsubsection Extension: @code{ignore_line_breaks}
@anchor{#extension-ignore_line_breaks}
Causes newlines within a paragraph to be ignored, rather than being
treated as spaces or as hard line breaks. This option is intended for
use with East Asian languages where spaces are not used between words,
but text is divided into lines for readability.

@node Extension east_asian_line_breaks
@subsubsection Extension: @code{east_asian_line_breaks}
@anchor{#extension-east_asian_line_breaks}
Causes newlines within a paragraph to be ignored, rather than being
treated as spaces or as hard line breaks, when they occur between two
East Asian wide characters. This is a better choice than
@code{ignore_line_breaks} for texts that include a mix of East Asian
wide characters and other characters.
Extension: @code{emoji}
Parses textual emojis like @code{:smile:} as Unicode emoticons.

@node Extension tex_math_single_backslash
@subsubsection Extension: @code{tex_math_single_backslash}
@anchor{#extension-tex_math_single_backslash}
Causes anything between @code{\(} and @code{\)} to be interpreted as
inline TeX math, and anything between @code{\[} and @code{\]} to be
interpreted as display TeX math. Note: a drawback of this extension is
that it precludes escaping @code{(} and @code{[}.

@node Extension tex_math_double_backslash
@subsubsection Extension: @code{tex_math_double_backslash}
@anchor{#extension-tex_math_double_backslash}
Causes anything between @code{\\(} and @code{\\)} to be interpreted as
inline TeX math, and anything between @code{\\[} and @code{\\]} to be
interpreted as display TeX math.

@node Extension markdown_attribute
@subsubsection Extension: @code{markdown_attribute}
@anchor{#extension-markdown_attribute}
By default, pandoc interprets material inside block-level tags as
Markdown. This extension changes the behavior so that Markdown is only
parsed inside block-level tags if the tags have the attribute
@code{markdown=1}.

@node Extension mmd_title_block
@subsubsection Extension: @code{mmd_title_block}
@anchor{#extension-mmd_title_block}
Enables a @uref{http://fletcherpenney.net/multimarkdown/,MultiMarkdown}
style title block at the top of the document, for example:

@verbatim
Title:   My title
Author:  John Doe
Date:    September 1, 2008
Comment: This is a sample mmd title block, with
         a field spanning multiple lines.
@end verbatim

See the MultiMarkdown documentation for details. If
@code{pandoc_title_block} or @code{yaml_metadata_block} is enabled, it
will take precedence over @code{mmd_title_block}.

@node Extension abbreviations
@subsubsection Extension: @code{abbreviations}
@anchor{#extension-abbreviations}
Parses PHP Markdown Extra abbreviation keys, like

@verbatim
*[HTML]: Hypertext Markup Language
@end verbatim

Note that the pandoc document model does not support abbreviations, so
if this extension is enabled, abbreviation keys are simply skipped (as
opposed to being parsed as paragraphs).

@node Extension autolink_bare_uris
@subsubsection Extension: @code{autolink_bare_uris}
@anchor{#extension-autolink_bare_uris}
Makes all absolute URIs into links, even when not surrounded by pointy
braces @code{<...>}.

@node Extension ascii_identifiers
@subsubsection Extension: @code{ascii_identifiers}
@anchor{#extension-ascii_identifiers}
Causes the identifiers produced by @code{auto_identifiers} to be pure
ASCII. Accents are stripped off of accented latin letters, and non-latin
letters are omitted.

@node Extension mmd_link_attributes
@subsubsection Extension: @code{mmd_link_attributes}
@anchor{#extension-mmd_link_attributes}
Parses multimarkdown style key-value attributes on link and image
references. This extension should not be confused with the
@ref{#extension-link_attributes,@code{link_attributes}} extension.

@verbatim
This is a reference ![image][ref] with multimarkdown attributes.

[ref]: http://path.to/image "Image title" width=20px height=30px
       id=myId class="myClass1 myClass2"
@end verbatim

@node Extension mmd_header_identifiers
@subsubsection Extension: @code{mmd_header_identifiers}
@anchor{#extension-mmd_header_identifiers}
Parses multimarkdown style header identifiers (in square brackets, after
the header but before any trailing @code{#}s in an ATX header).

@node Extension compact_definition_lists
@subsubsection Extension: @code{compact_definition_lists}
@anchor{#extension-compact_definition_lists}
Activates the definition list syntax of pandoc 1.12.x and earlier. This
syntax differs from the one described above under
@ref{#definition-lists,Definition lists} in several respects:

@itemize
@item
No blank line is required between consecutive items of the definition
list.
@item
To get a "tight" or "compact" list, omit space between consecutive
items; the space between a term and its definition does not affect
anything.
@item
Lazy wrapping of paragraphs is not allowed: the entire definition must
be indented four spaces.@footnote{To see why laziness is incompatible
with relaxing the requirement of a blank line between items, consider
the following example:

@verbatim
bar
:    definition
foo
:    definition
@end verbatim

Is this a single list item with two definitions of "bar," the first of
which is lazily wrapped, or two list items? To remove the ambiguity we
must either disallow lazy wrapping or require a blank line between list
items.}
@end itemize

@node Markdown variants
@section Markdown variants
@anchor{#markdown-variants}
In addition to pandoc's extended Markdown, the following Markdown
variants are supported:

@table @asis
@item @code{markdown_phpextra} (PHP Markdown Extra)

@code{footnotes}, @code{pipe_tables}, @code{raw_html},
@code{markdown_attribute}, @code{fenced_code_blocks},
@code{definition_lists}, @code{intraword_underscores},
@code{header_attributes}, @code{link_attributes}, @code{abbreviations},
@code{shortcut_reference_links}.
@item @code{markdown_github} (GitHub-Flavored Markdown)

@code{pipe_tables}, @code{raw_html}, @code{fenced_code_blocks},
@code{auto_identifiers}, @code{ascii_identifiers},
@code{backtick_code_blocks}, @code{autolink_bare_uris},
@code{intraword_underscores}, @code{strikeout}, @code{hard_line_breaks},
@code{emoji}, @code{shortcut_reference_links}.
@item @code{markdown_mmd} (MultiMarkdown)

@code{pipe_tables}, @code{raw_html}, @code{markdown_attribute},
@code{mmd_link_attributes}, @code{raw_tex},
@code{tex_math_double_backslash}, @code{intraword_underscores},
@code{mmd_title_block}, @code{footnotes}, @code{definition_lists},
@code{all_symbols_escapable}, @code{implicit_header_references},
@code{auto_identifiers}, @code{mmd_header_identifiers},
@code{shortcut_reference_links}.
@item @code{markdown_strict} (Markdown.pl)

@code{raw_html}
@end table

@node Extensions with formats other than Markdown
@section Extensions with formats other than Markdown
@anchor{#extensions-with-formats-other-than-markdown}
Some of the extensions discussed above can be used with formats other
than Markdown:

@itemize
@item
@code{auto_identifiers} can be used with @code{latex}, @code{rst},
@code{mediawiki}, and @code{textile} input (and is used by default).

@item
@code{tex_math_dollars}, @code{tex_math_single_backslash}, and
@code{tex_math_double_backslash} can be used with @code{html} input.
(This is handy for reading web pages formatted using MathJax, for
example.)

@end itemize

@node Producing slide shows with pandoc
@chapter Producing slide shows with pandoc
@anchor{#producing-slide-shows-with-pandoc}
You can use pandoc to produce an HTML + javascript slide presentation
that can be viewed via a web browser. There are five ways to do this,
using @uref{http://meyerweb.com/eric/tools/s5/,S5},
@uref{http://paulrouget.com/dzslides/,DZSlides},
@uref{http://www.w3.org/Talks/Tools/Slidy/,Slidy},
@uref{http://goessner.net/articles/slideous/,Slideous}, or
@uref{http://lab.hakim.se/reveal-js/,reveal.js}. You can also produce a
PDF slide show using LaTeX
@uref{https://ctan.org/pkg/beamer,@code{beamer}}.

Here's the Markdown source for a simple slide show, @code{habits.txt}:

@verbatim
% Habits
% John Doe
% March 22, 2005

# In the morning

## Getting up

- Turn off alarm
- Get out of bed

## Breakfast

- Eat eggs
- Drink coffee

# In the evening

## Dinner

- Eat spaghetti
- Drink wine

------------------

![picture of spaghetti](images/spaghetti.jpg)

## Going to sleep

- Get in bed
- Count sheep
@end verbatim

To produce an HTML/javascript slide show, simply type

@verbatim
pandoc -t FORMAT -s habits.txt -o habits.html
@end verbatim

where @code{FORMAT} is either @code{s5}, @code{slidy}, @code{slideous},
@code{dzslides}, or @code{revealjs}.

For Slidy, Slideous, reveal.js, and S5, the file produced by pandoc with
the @code{-s/--standalone} option embeds a link to javascripts and CSS
files, which are assumed to be available at the relative path
@code{s5/default} (for S5), @code{slideous} (for Slideous),
@code{reveal.js} (for reveal.js), or at the Slidy website at
@code{w3.org} (for Slidy). (These paths can be changed by setting the
@code{slidy-url}, @code{slideous-url}, @code{revealjs-url}, or
@code{s5-url} variables; see @ref{#variables-for-slides,Variables for
slides}, above.) For DZSlides, the (relatively short) javascript and css
are included in the file by default.

With all HTML slide formats, the @code{--self-contained} option can be
used to produce a single file that contains all of the data necessary to
display the slide show, including linked scripts, stylesheets, images,
and videos.

To produce a PDF slide show using beamer, type

@verbatim
pandoc -t beamer habits.txt -o habits.pdf
@end verbatim

Note that a reveal.js slide show can also be converted to a PDF by
printing it to a file from the browser.
@menu
* Structuring the slide show::
* Incremental lists::
* Inserting pauses::
* Styling the slides::
* Speaker notes::
* Frame attributes in beamer::
@end menu

@node Structuring the slide show
@section Structuring the slide show
@anchor{#structuring-the-slide-show}
By default, the @emph{slide level} is the highest header level in the
hierarchy that is followed immediately by content, and not another
header, somewhere in the document. In the example above, level 1 headers
are always followed by level 2 headers, which are followed by content,
so 2 is the slide level. This default can be overridden using the
@code{--slide-level} option.

The document is carved up into slides according to the following rules:

@itemize
@item
A horizontal rule always starts a new slide.

@item
A header at the slide level always starts a new slide.

@item
Headers @emph{below} the slide level in the hierarchy create headers
@emph{within} a slide.

@item
Headers @emph{above} the slide level in the hierarchy create "title
slides," which just contain the section title and help to break the
slide show into sections.

@item
A title page is constructed automatically from the document's title
block, if present. (In the case of beamer, this can be disabled by
commenting out some lines in the default template.)

@end itemize

These rules are designed to support many different styles of slide show.
If you don't care about structuring your slides into sections and
subsections, you can just use level 1 headers for all each slide. (In
that case, level 1 will be the slide level.) But you can also structure
the slide show into sections, as in the example above.

Note: in reveal.js slide shows, if slide level is 2, a two-dimensional
layout will be produced, with level 1 headers building horizontally and
level 2 headers building vertically. It is not recommended that you use
deeper nesting of section levels with reveal.js.

@node Incremental lists
@section Incremental lists
@anchor{#incremental-lists}
By default, these writers produce lists that display "all at once." If
you want your lists to display incrementally (one item at a time), use
the @code{-i} option. If you want a particular list to depart from the
default (that is, to display incrementally without the @code{-i} option
and all at once with the @code{-i} option), put it in a block quote:

@verbatim
> - Eat spaghetti
> - Drink wine
@end verbatim

In this way incremental and nonincremental lists can be mixed in a
single document.

@node Inserting pauses
@section Inserting pauses
@anchor{#inserting-pauses}
You can add "pauses" within a slide by including a paragraph containing
three dots, separated by spaces:

@verbatim
# Slide with a pause

content before the pause

. . .

content after the pause
@end verbatim

@node Styling the slides
@section Styling the slides
@anchor{#styling-the-slides}
You can change the style of HTML slides by putting customized CSS files
in @code{$DATADIR/s5/default} (for S5), @code{$DATADIR/slidy} (for
Slidy), or @code{$DATADIR/slideous} (for Slideous), where
@code{$DATADIR} is the user data directory (see @code{--data-dir},
above). The originals may be found in pandoc's system data directory
(generally @code{$CABALDIR/pandoc-VERSION/s5/default}). Pandoc will look
there for any files it does not find in the user data directory.

For dzslides, the CSS is included in the HTML file itself, and may be
modified there.

All @uref{https://github.com/hakimel/reveal.js#configuration,reveal.js
configuration options} can be set through variables. For example, themes
can be used by setting the @code{theme} variable:

@verbatim
-V theme=moon
@end verbatim

Or you can specify a custom stylesheet using the @code{--css} option.

To style beamer slides, you can specify a @code{theme},
@code{colortheme}, @code{fonttheme}, @code{innertheme}, and
@code{outertheme}, using the @code{-V} option:

@verbatim
pandoc -t beamer habits.txt -V theme:Warsaw -o habits.pdf
@end verbatim

Note that header attributes will turn into slide attributes (on a
@code{<div>} or @code{<section>}) in HTML slide formats, allowing you to
style individual slides. In beamer, the only header attribute that
affects slides is the @code{allowframebreaks} class, which sets the
@code{allowframebreaks} option, causing multiple slides to be created if
the content overfills the frame. This is recommended especially for
bibliographies:

@verbatim
# References {.allowframebreaks}
@end verbatim

@node Speaker notes
@section Speaker notes
@anchor{#speaker-notes}
reveal.js has good support for speaker notes. You can add notes to your
Markdown document thus:

@verbatim
<div class="notes">
This is my note.

- It can contain Markdown
- like this list

</div>
@end verbatim

To show the notes window, press @code{s} while viewing the presentation.
Notes are not yet supported for other slide formats, but the notes will
not appear on the slides themselves.

@node Frame attributes in beamer
@section Frame attributes in beamer
@anchor{#frame-attributes-in-beamer}
Sometimes it is necessary to add the LaTeX @code{[fragile]} option to a
frame in beamer (for example, when using the @code{minted} environment).
This can be forced by adding the @code{fragile} class to the header
introducing the slide:

@verbatim
# Fragile slide {.fragile}
@end verbatim

All of the other frame attributes described in Section 8.1 of the
@uref{http://ctan.math.utah.edu/ctan/tex-archive/macros/latex/contrib/beamer/doc/beameruserguide.pdf,Beamer
User's Guide} may also be used: @code{allowdisplaybreaks},
@code{allowframebreaks}, @code{b}, @code{c}, @code{t},
@code{environment}, @code{label}, @code{plain}, @code{shrink}.

@node Creating EPUBs with pandoc
@chapter Creating EPUBs with pandoc
@anchor{#creating-epubs-with-pandoc}
@menu
* EPUB Metadata::
* Linked media::
@end menu

@node EPUB Metadata
@section EPUB Metadata
@anchor{#epub-metadata}
EPUB metadata may be specified using the @code{--epub-metadata} option,
but if the source document is Markdown, it is better to use a
@ref{#extension-yaml_metadata_block,YAML metadata block}. Here is an
example:

@verbatim
---
title:
- type: main
  text: My Book
- type: subtitle
  text: An investigation of metadata
creator:
- role: author
  text: John Smith
- role: editor
  text: Sarah Jones
identifier:
- scheme: DOI
  text: doi:10.234234.234/33
publisher:  My Press
rights: © 2007 John Smith, CC BY-NC
...
@end verbatim

The following fields are recognized:

@table @asis
@item @code{identifier}

Either a string value or an object with fields @code{text} and
@code{scheme}. Valid values for @code{scheme} are @code{ISBN-10},
@code{GTIN-13}, @code{UPC}, @code{ISMN-10}, @code{DOI}, @code{LCCN},
@code{GTIN-14}, @code{ISBN-13}, @code{Legal deposit number}, @code{URN},
@code{OCLC}, @code{ISMN-13}, @code{ISBN-A}, @code{JP}, @code{OLCC}.
@item @code{title}

Either a string value, or an object with fields @code{file-as} and
@code{type}, or a list of such objects. Valid values for @code{type} are
@code{main}, @code{subtitle}, @code{short}, @code{collection},
@code{edition}, @code{extended}.
@item @code{creator}

Either a string value, or an object with fields @code{role},
@code{file-as}, and @code{text}, or a list of such objects. Valid values
for @code{role} are
@uref{http://loc.gov/marc/relators/relaterm.html,MARC relators}, but
pandoc will attempt to translate the human-readable versions (like
"author" and "editor") to the appropriate marc relators.
@item @code{contributor}

Same format as @code{creator}.
@item @code{date}

A string value in @code{YYYY-MM-DD} format. (Only the year is
necessary.) Pandoc will attempt to convert other common date formats.
@item @code{lang} (or legacy: @code{language})

A string value in @uref{https://tools.ietf.org/html/bcp47,BCP 47}
format. Pandoc will default to the local language if nothing is
specified.
@item @code{subject}

A string value or a list of such values.
@item @code{description}

A string value.
@item @code{type}

A string value.
@item @code{format}

A string value.
@item @code{relation}

A string value.
@item @code{coverage}

A string value.
@item @code{rights}

A string value.
@item @code{cover-image}

A string value (path to cover image).
@item @code{stylesheet}

A string value (path to CSS stylesheet).
@item @code{page-progression-direction}

Either @code{ltr} or @code{rtl}. Specifies the
@code{page-progression-direction} attribute for the
@uref{http://idpf.org/epub/301/spec/epub-publications.html#sec-spine-elem,@code{spine}
element}.
@end table

@node Linked media
@section Linked media
@anchor{#linked-media}
By default, pandoc will download linked media (including audio and
video) and include it in the EPUB container, yielding a completely
self-contained EPUB. If you want to link to external media resources
instead, use raw HTML in your source and add @code{data-external="1"} to
the tag with the @code{src} attribute. For example:

@verbatim
<audio controls="1">
  <source src="http://example.com/music/toccata.mp3"
          data-external="1" type="audio/mpeg">
  </source>
</audio>
@end verbatim

@node Literate Haskell support
@chapter Literate Haskell support
@anchor{#literate-haskell-support}
If you append @code{+lhs} (or @code{+literate_haskell}) to an
appropriate input or output format (@code{markdown},
@code{markdown_strict}, @code{rst}, or @code{latex} for input or output;
@code{beamer}, @code{html} or @code{html5} for output only), pandoc will
treat the document as literate Haskell source. This means that

@itemize
@item
In Markdown input, "bird track" sections will be parsed as Haskell code
rather than block quotations. Text between @code{\begin@{code@}} and
@code{\end@{code@}} will also be treated as Haskell code. For ATX-style
headers the character '=' will be used instead of '#'.

@item
In Markdown output, code blocks with classes @code{haskell} and
@code{literate} will be rendered using bird tracks, and block quotations
will be indented one space, so they will not be treated as Haskell code.
In addition, headers will be rendered setext-style (with underlines)
rather than ATX-style (with '#' characters). (This is because ghc treats
'#' characters in column 1 as introducing line numbers.)

@item
In restructured text input, "bird track" sections will be parsed as
Haskell code.

@item
In restructured text output, code blocks with class @code{haskell} will
be rendered using bird tracks.

@item
In LaTeX input, text in @code{code} environments will be parsed as
Haskell code.

@item
In LaTeX output, code blocks with class @code{haskell} will be rendered
inside @code{code} environments.

@item
In HTML output, code blocks with class @code{haskell} will be rendered
with class @code{literatehaskell} and bird tracks.

@end itemize

Examples:

@verbatim
pandoc -f markdown+lhs -t html
@end verbatim

reads literate Haskell source formatted with Markdown conventions and
writes ordinary HTML (without bird tracks).

@verbatim
pandoc -f markdown+lhs -t html+lhs
@end verbatim

writes HTML with the Haskell code in bird tracks, so it can be copied
and pasted as literate Haskell source.

@node Syntax highlighting
@chapter Syntax highlighting
@anchor{#syntax-highlighting}
Pandoc will automatically highlight syntax in
@ref{#fenced-code-blocks,fenced code blocks} that are marked with a
language name. The Haskell library
@uref{https://github.com/jgm/highlighting-kate,highlighting-kate} is
used for highlighting, which works in HTML, Docx, and LaTeX/PDF output.
The color scheme can be selected using the @code{--highlight-style}
option. The default color scheme is @code{pygments}, which imitates the
default color scheme used by the Python library pygments, but pygments
is not actually used to do the highlighting.

To see a list of language names that pandoc will recognize, type
@code{pandoc --version}.

To disable highlighting, use the @code{--no-highlight} option.

@node Custom writers
@chapter Custom writers
@anchor{#custom-writers}
Pandoc can be extended with custom writers written in
@uref{http://www.lua.org,lua}. (Pandoc includes a lua interpreter, so
lua need not be installed separately.)

To use a custom writer, simply specify the path to the lua script in
place of the output format. For example:

@verbatim
pandoc -t data/sample.lua
@end verbatim

Creating a custom writer requires writing a lua function for each
possible element in a pandoc document. To get a documented example which
you can modify according to your needs, do

@verbatim
pandoc --print-default-data-file sample.lua
@end verbatim

@node Authors
@chapter Authors
@anchor{#authors}
© 2006-2015 John MacFarlane (jgm@@berkeley.edu). Released under the
@uref{http://www.gnu.org/copyleft/gpl.html,GPL}, version 2 or greater.
This software carries no warranty of any kind. (See COPYRIGHT for full
copyright and warranty notices.)

Contributors include Aaron Wolen, Albert Krewinkel, Alexander
Kondratskiy, Alexander Sulfrian, Alexander V Vershilov, Alfred
Wechselberger, Andreas Lööw, Andrew Dunning, Antoine Latter, Arata
Mizuki, Arlo O'Keeffe, Artyom Kazak, Ben Gamari, Beni
Cherniavsky-Paskin, Bjorn Buckwalter, Bradley Kuhn, Brent Yorgey, Bryan
O'Sullivan, B. Scott Michel, Caleb McDaniel, Calvin Beck, Christoffer
Ackelman, Christoffer Sawicki, Clare Macrae, Clint Adams, Conal Elliott,
Craig S. Bosma, Daniel Bergey, Daniel T. Staal, David Lazar, David
Röthlisberger, Denis Laxalde, Douglas Calvert, Douglas F. Calvert, Eric
Kow, Eric Seidel, Florian Eitel, François Gannaz, Freiric Barral, Fyodor
Sheremetyev, Gabor Pali, Gavin Beatty, Greg Maslov, Grégory Bataille,
Greg Rundlett, gwern, Gwern Branwen, Hans-Peter Deifel, Henry de
Valence, Ilya V. Portnov, infinity0x, Jaime Marquínez Ferrándiz, James
Aspnes, Jamie F. Olson, Jan Larres, Jason Ronallo, Jeff Arnold, Jeff
Runningen, Jens Petersen, Jérémy Bobbio, Jesse Rosenthal, J. Lewis Muir,
Joe Hillenbrand, John MacFarlane, Jonas Smedegaard, Jonathan Daugherty,
Josef Svenningsson, Jose Luis Duran, Julien Cretel, Justin Bogner,
Kelsey Hightower, Konstantin Zudov, Lars-Dominik Braun, Luke Plant, Mark
Szepieniec, Mark Wright, Masayoshi Takahashi, Matej Kollar, Mathias
Schenner, Matthew Pickering, Matthias C. M. Troffaes, Mauro Bieg, Max
Bolingbroke, Max Rydahl Andersen, Merijn Verstraaten, Michael Snoyman,
Michael Thompson, MinRK, Nathan Gass, Neil Mayhew, Nick Bart, Nicolas
Kaiser, Nikolay Yakimov, nkalvi, Paulo Tanimoto, Paul Rivier, Peter
Wang, Philippe Ombredanne, Phillip Alday, Puneeth Chaganti, qerub, Ralf
Stephan, Recai Oktaş, rodja.trappe, RyanGlScott, Scott Morrison, Sergei
Trofimovich, Sergey Astanin, Shahbaz Youssefi, Shaun Attfield,
shreevatsa.public, Simon Hengel, Sumit Sahrawat, takahashim, thsutton,
Tim Lin, Timothy Humphries, Todd Sifleet, Tom Leese, Uli Köhler, Václav
Zeman, Viktor Kronvall, Vincent, Wikiwide, and Xavier Olive.

@bye
