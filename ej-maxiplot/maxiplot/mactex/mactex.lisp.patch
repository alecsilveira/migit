--- /usr/share/maxima/5.24.0/src/mactex.lisp.orig	2013-08-24 03:00:51.705963478 +0200
+++ /usr/share/maxima/5.24.0/src/mactex.lisp	2013-08-24 12:52:42.233664838 +0200
@@ -474,10 +474,12 @@
 
 (defprop $%gamma "\\gamma" texword)
 (defprop $delta "\\delta" texword)
-(defprop $epsilon "\\varepsilon" texword)
+;(defprop $theta "\\varepsilon" texword) ;; Giorgio Nucci
+(defprop $epsilon "\\epsilon" texword)
 (defprop $zeta "\\zeta" texword)
 (defprop $eta "\\eta" texword)
-(defprop $theta "\\vartheta" texword)
+;(defprop $theta "\\vartheta" texword) ;; Giorgio Nucci
+(defprop $theta "\\theta" texword)
 (defprop $iota "\\iota" texword)
 (defprop $kappa "\\kappa" texword)
 (defprop lambda "\\lambda" texword)
@@ -492,7 +494,8 @@
 (defprop $sigma "\\sigma" texword)
 (defprop $tau "\\tau" texword)
 (defprop $upsilon "\\upsilon" texword)
-(defprop $phi "\\varphi" texword)
+;(defprop $phi "\\varphi" texword) ;; Giorgio Nucci
+(defprop $phi "\\phi" texword)
 (defprop $chi "\\chi" texword)
 (defprop $psi "\\psi" texword)
 (defprop $omega "\\omega" texword)
@@ -826,7 +829,6 @@
     (setf (get a 'texsym) (list b))
     (setf (get a 'tex-rbp) 130)))
 
-
 ;; I WONDER IF ALL BUILT-IN FUNCTIONS SHOULD BE SET IN ROMAN TYPE
 (defprop $atan2 "{\\rm atan2}" texword)
 
@@ -835,42 +837,155 @@
 ;; I don't know if these are Latex-specific so you may have to define
 ;; them if you use plain Tex.
 
+;;---------------------------------------Giorgio Nucci
+;;--- REDEFINE THE FUNCTIONS TO INCLUDE PARENTHESIS---
+;; (OR THE | SYMBOL FOR THE DETERMINANT)
+;; I DON'T KNOW HOW TO DO THIS WITH tex-setup:
+(defprop %determinant tex-determinant tex)
+(defun tex-determinant(x l r)
+  ;; format as \\determinant\left( \right) assuming implicit parens for determinant grouping
+  (tex (cadr x) (append l '("\\left|")) (append '("\\right|") r) 'mparen 'mparen))
+
+(defprop %acos tex-acos tex)
+(defun tex-acos(x l r)
+  ;; format as \\acos\left( \right) assuming implicit parens for acos grouping
+  (tex (cadr x) (append l '("\\acos\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %asin tex-asin tex)
+(defun tex-asin(x l r)
+  ;; format as \\asin\left( \right) assuming implicit parens for asin grouping
+  (tex (cadr x) (append l '("\\asin\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %atan tex-atan tex)
+(defun tex-atan(x l r)
+  ;; format as \\atan\left( \right) assuming implicit parens for atan grouping
+  (tex (cadr x) (append l '("\\atan\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %cosh tex-cosh tex)
+(defun tex-cosh(x l r)
+  ;; format as \\cosh\left( \right) assuming implicit parens for cosh grouping
+  (tex (cadr x) (append l '("\\cosh\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %cos tex-cos tex)
+(defun tex-cos(x l r)
+  ;; format as \\cos\left( \right) assuming implicit parens for cos grouping
+  (tex (cadr x) (append l '("\\cos\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %cot tex-cot tex)
+(defun tex-cot(x l r)
+  ;; format as \\cot\left( \right) assuming implicit parens for cot grouping
+  (tex (cadr x) (append l '("\\cot\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %coth tex-coth tex)
+(defun tex-coth(x l r)
+  ;; format as \\coth\left( \right) assuming implicit parens for coth grouping
+  (tex (cadr x) (append l '("\\coth\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %csc tex-csc tex)
+(defun tex-csc(x l r)
+  ;; format as \\csc\left( \right) assuming implicit parens for csc grouping
+  (tex (cadr x) (append l '("\\csc\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %dim tex-dim tex)
+(defun tex-dim(x l r)
+  ;; format as \\dim\left( \right) assuming implicit parens for dim grouping
+  (tex (cadr x) (append l '("\\dim\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %exp tex-exp tex)
+(defun tex-exp(x l r)
+  ;; format as \\exp\left( \right) assuming implicit parens for exp grouping
+  (tex (cadr x) (append l '("\\exp\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %gcd tex-gcd tex)
+(defun tex-gcd(x l r)
+  ;; format as \\gcd\left( \right) assuming implicit parens for gcd grouping
+  (tex (cadr x) (append l '("\\gcd\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %inf tex-inf tex)
+(defun tex-inf(x l r)
+  ;; format as \\inf\left( \right) assuming implicit parens for inf grouping
+  (tex (cadr x) (append l '("\\inf\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %ln tex-ln tex)
+(defun tex-ln(x l r)
+  ;; format as \\ln\left( \right) assuming implicit parens for ln grouping
+  (tex (cadr x) (append l '("\\ln\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %log tex-log tex)
+(defun tex-log(x l r)
+  ;; format as \\log\left( \right) assuming implicit parens for log grouping
+  (tex (cadr x) (append l '("\\log\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %max tex-max tex)
+(defun tex-max(x l r)
+  ;; format as \\max\left( \right) assuming implicit parens for max grouping
+  (tex (cadr x) (append l '("\\max\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %min tex-min tex)
+(defun tex-min(x l r)
+  ;; format as \\min\left( \right) assuming implicit parens for min grouping
+  (tex (cadr x) (append l '("\\min\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %sec tex-sec tex)
+(defun tex-sec(x l r)
+  ;; format as \\sec\left( \right) assuming implicit parens for sec grouping
+  (tex (cadr x) (append l '("\\sec\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %sin tex-sin tex)
+(defun tex-sin(x l r)
+  ;; format as \\sin\left( \right) assuming implicit parens for sin grouping
+  (tex (cadr x) (append l '("\\sin\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %sinh tex-sinh tex)
+(defun tex-sinh(x l r)
+  ;; format as \\sinh\left( \right) assuming implicit parens for sinh grouping
+  (tex (cadr x) (append l '("\\sinh\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %tan tex-tan tex)
+(defun tex-tan(x l r)
+  ;; format as \\tan\left( \right) assuming implicit parens for tan grouping
+  (tex (cadr x) (append l '("\\tan\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
+(defprop %tanh tex-tanh tex)
+(defun tex-tanh(x l r)
+  ;; format as \\tanh\left( \right) assuming implicit parens for tanh grouping
+  (tex (cadr x) (append l '("\\tanh\\left(")) (append '("\\right)") r) 'mparen 'mparen))
+
 (mapc #'tex-setup
       '(
-	(%acos "\\arccos ")
-	(%asin "\\arcsin ")
-	(%atan "\\arctan ")
-
-					; Latex's arg(x) is ... ?
-	(%cos "\\cos ")
-	(%cosh "\\cosh ")
-	(%cot "\\cot ")
-	(%coth "\\coth ")
-	(%csc "\\csc ")
-					; Latex's "deg" is ... ?
-	(%determinant "\\det ")
-	(%dim "\\dim ")
-	(%exp "\\exp ")
-	(%gcd "\\gcd ")
-					; Latex's "hom" is ... ?
-	(%inf "\\inf ")		   ; many will prefer "\\infty". Hmmm.
-					; Latex's "ker" is ... ?
-					; Latex's "lg" is ... ?
-					; lim is handled by tex-limit.
-					; Latex's "liminf" ... ?
-					; Latex's "limsup" ... ?
-	(%ln "\\ln ")
-	(%log "\\log ")
-	(%max "\\max ")
-	(%min "\\min ")
-					; Latex's "Pr" ... ?
-	(%sec "\\sec ")
-	(%sin "\\sin ")
-	(%sinh "\\sinh ")
-					; Latex's "sup" ... ?
-	(%tan "\\tan ")
-	(%tanh "\\tanh ")
-	;; (%erf "{\\rm erf}") this would tend to set erf(x) as erf x. Unusual
+	;;(%acos "\\arccos ")
+	;;(%asin "\\arcsin ")
+	;;(%atan "\\arctan ")
+
+					;;; Latex's arg(x) is ... ?
+	;;(%cosh "\\cosh ")
+	;;(%cot "\\cot ")
+	;;(%coth "\\coth ")
+	;;(%csc "\\csc ")
+					;;; Latex's "deg" is ... ?
+	;;(%determinant "\\det ")
+	;;(%dim "\\dim ")
+	;;(%exp "\\exp ")
+	;;(%gcd "\\gcd ")
+					;;; Latex's "hom" is ... ?
+	;;(%inf "\\inf ")		   ; many will prefer "\\infty". Hmmm.
+					;;; Latex's "ker" is ... ?
+					;;; Latex's "lg" is ... ?
+					;;; lim is handled by tex-limit.
+					;;; Latex's "liminf" ... ?
+					;;; Latex's "limsup" ... ?
+	;;(%ln "\\ln ")
+	;;(%log "\\log ")
+	;;(%max "\\max ")
+	;;(%min "\\min ")
+					;;; Latex's "Pr" ... ?
+	;;(%sec "\\sec ")
+	;;(%sin "\\sin ")
+	;;(%sinh "\\sinh ")
+					;;; Latex's "sup" ... ?
+	;;(%tan "\\tan ")
+	;;(%tanh "\\tanh ")
+	;;; (%erf "{\\rm erf}") this would tend to set erf(x) as erf x. Unusual
 					;(%laplace "{\\cal L}")
 
     ; Maxima built-in functions which do not have corresponding TeX symbols.
@@ -891,6 +1006,8 @@
     (%acoth "{\\rm acoth}\\; ")
 
 	)) ;; etc
+;;--- FINISH RE-DEFINING FUNCTIONS---
+;;-----------------------------------
 
 (defprop mcond tex-mcond tex)
 (defprop %mcond tex-mcond tex)
